1.redis命令
    1.key管理
        keys pattern : 查看key是否存在
        exists key:是否存在
        expire key second:设置key的过期时间
        del key:删除某个key
        ttl key：查看剩余时间，不存在返回-2 ，不过期为 -1 否则返回时间 以秒为单位
        persist key:取消过期时间
        PEXPIRE key millseconds 修改key的过期时间
        select : 选择数据库 0~15
        move key dbindex ： 转移到别的数据库
        rename key key2
        echo 打印
        dbsize 查看数据库key数量
        info
        flushdb 清空db
        flushall 清空所有db
        del key 删除key
        type key 返回key储存的类型

        应用场景：
            exipre key seconds
                1.限时活动信息
                2.网站数据缓存
                3.手机验证码
                4.限制网站访问频率 （统计ip访问频率）

            命名实践：user:123123:zhansan  user表:id:名字 等作为key用于区分 分隔符不要用数据可能出现的字符
2 数据类型
    1. String 类型
        set key_name value 多次设置会覆盖
        setnx key1 value : nx代表not exist .既：不存在则设置并返回1 ，存在不设置，并返回0.  可用于分布式锁
        setex key1 10 value: ex代表expired  其中的10表示过期时间
        setrange string range value :替换字符串

        get key_name : 获取值，不存在返回nil 不是字符串，返回一个错误
        getrange key start end: 带偏移的获取
        getbit key offset 带偏移的获取
        getset key value 设置key的值，并返回旧值
        strlen key 返回存储的字串长度

        del key 删除指定key
        mset  写多个值
        mget 读多个值
        incr key  key存储的数字+1
        decr key

        应用场景：
            1.string通常保存字串或者json数据
            2.也可以保存base64数据
            3.计数器  incr操作具有原子性。三个客户端都调用加，不会出现不一致

    2. hash类型
        hset key field value
        hset key field value[filed1 value1]  同时设置多个field -value
        hget key field 获取hash中的值，根据field得到value
        hmget key field[field1] :获取key 所有给定字段的值
        hgetall key :  返回hash表中所有的字段和值
        hkeys key : 获取所有哈希表的字段
        hlen key ： 获取哈希表的数量
        hdel key field1[field2] : 删除一个或多个字段
        hsetnx   ....   不存在则设置
        hincrby key field increment 为key中字段加上
        hincrbyfloat  ... 加float值
        hexists key field 查询表中的key是否存在

        例子：
        127.0.0.1:6379> hset user:1 id 1
        127.0.0.1:6379> keys *
        1) "user:1"
        127.0.0.1:6379> hmset user:1 name lisi age 22
        127.0.0.1:6379> hget user:1 id
        "1"
        127.0.0.1:6379> hget user:1 name
        "lisi"
        127.0.0.1:6379> hgetall user:1
        1) "id"
        2) "1"
        3) "name"
        4) "lisi"
        5) "age"
        6) "22"


        应用场景：
            1.常用于存储对象

    3.set  集合中没有重复，通过哈希表实现
        sadd key member1 [member2] :向集合添加一个或多个成员
        scard key : 获取集合成员数
        smembers key :返回集合所有成员
        sismember key member :判断是否集合成员
        srandmember key [count]  : 返回集合中一个或多个随机数
        srem key member1 [member2] ： 移除一个或多个元素
        spop key [count] ::移除并 返回集合中的一个随机元素
        smove source destination member
        sdiff key1 [key2] 返回给定所有集合的差集
        sdiffstore destination key1 [key2] 返回给定所有集合的差集并存储再 destination中交集语法：
        sinter key1 [key2] 给定所有集合的交集
        sinterstore destination key1 [key2] 交集
        sunion key1 [key2] 并集
        sunionstore destiantion key1 [key2]

        应用场景：
            1.利用集合操作，取不同兴趣圈子的交集，实现共同关注，共同好友等功能。
            2.利用唯一性，统计访问网站的ip，活跃用户列表
        例子：1.判断用户名是否存在。缓存所有用户名，这样不需要sql查询
             2.抽奖。
    4.zset 有序集合，不重复。每个元素关联一个double分数。根据分数排列。分数可以重复
        zadd key score1 member1 [score2 member2]:向集合添加或者更新成员数据以及分数
        zcard key :
        zcount key min max:
        zrank key member : 返回成员的索引
        zrange key start stop [withscores]:通过索引区间返回有序集合成指定区间内的成员（低到高）
        zrangebyscore key min max  [withscores] [limit] :通过分数返回区间内成员
        zrevrange key start stop [withscores] :
        zrevrangebyscore key max min [withscores]
        del key
        zrem key member : 移除成员
        zremrangebyrank key start stop
        zremrangebyscore key min max
        zincrby key increment member :添加memeber元素的分数

        应用场景：排行榜，销量排名，积分排名。
            1.按照时间作为score这样可以时间排序信息
            2.将score作为


    5.HyperLogLog  用于基数统计算法
        pfadd key element [element] 添加指定元素到hyperloglog中
        pfcount key [key ...] 返回给定的基数估计值
        pfmerge destkey sourcekey [sourcekey ..] 将多个kyperloglog合并为一个