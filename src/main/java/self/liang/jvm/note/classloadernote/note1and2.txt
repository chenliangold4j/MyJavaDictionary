第一章类加载器
    1.java代码中，类型的加载，连接与初始化过程都是在程序运行期间完成的
            最常见的加载情况，就是把class文件从磁盘上加载到内存里
            连接：将类与类的关系处理好 比如类与类的引用
            初始化：静态变量的赋值等操作
        大多数情况，但是不是绝对
    2.类都是由类加载器加载的
    3.java虚拟机与程序的生命周期
        在以下情况会结束：
            执行system.exit()方法
            程序正常执行结束
            程序因异常或者错误而终结
            操作系统错误导致jvm进程终止
    4.加载：
        查找并加载类的二进制数据
      连接：
        验证：确保被加载类的正确性
        准备：为类的静态变量（！）分配内存，并将其初始化为默认值（每个类型都有默认值，比如int的0，boolean的false，String的null）
        解析：把类中的符号引用转换为直接引用（符号引用类似我们的代码，，直接引用类似用指针直接指向方法或者变量的位置）
      初始化：为类静态变量赋予正确的初始值
    5.使用--》卸载
    6.java程序对与类的使用
        主动使用、七种情况
            1，创建类的实例  new
            2，访问某个类或接口的静态变量，或者对改静态变量赋值
            3，调用类的静态方法
                就对应书上的 new getstatic putstatic invokestatic4个字节码指令时
            4，反射调用
            6，初始化一个类的子类，需要先初始化父类
            6，main方法的类，也就是主类
            7，jdk1.7的动态语言支持：java.lang.invoke.MethodHandle实例的解析结果REF_getStatic,REF_putStatic,REF_invokeStatic的方法句柄，并且这个方法句柄的对应的类没有进行过初始化。

        被动使用
            除了以上情况之外，其他的对类的调用都是被动调用，不会初始化类，但可能会加载类

    7所有java虚拟机实现必须在每个类或即可被java程序“首次主动使用”时才初始化他们
          包含的含义：1）主动使用才初始化 2）初始化执行一次

