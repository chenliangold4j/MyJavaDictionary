资源清单

    1.名称空间级别 （只在此名称空间生效）  kubeadm k8s kube-system

        工作负载型资源(workload)：Pod、ReplicaSet、Deployment、StatefulSet、DaemonSet、Job、CronJob(ReplicationController在v1.11版本被废弃)

        服务发现及负载均衡型资源(ServiceDiscoveryLoadBalance):Service、Ingress、...

        配置与存储型资源：Volume(存储卷)、CSI(容器存储接口,可以扩展各种各样的第三方存储卷)

        特殊类型的存储卷：ConfigMap(当配置中心来使用的资源类型)、Secret(保存敏感数据)、DownwardAPI(把外部环境中的信息输出给容器)

    2.集群级别：role
         集群级资源：Namespace、Node、Role、ClusterRole、RoleBinding、ClusterRoleBinding


    3.元数级别:HPA
        元数据型资源：HPA、PodTemplate、LimitRange


    字段说明
        1. 必须存在的字段：
            version                 String  这里指k8s api的版本，目前基本上是v1，可以用kubectl api-version 查询
            kind                    String  yaml文件定义的资源类型和角色，比如pod
            metadata                object  元数据对象，固定值为metadata
            metadata.name           String  元数据对象的名字，这里由我们编写，比如命名pod的名字
            metadata.namespace      String  元数据对象的命名空间，由我们自身定义
            spec                    Object  详细定义对象,固定值为spec
            spec.containers[]       list    spec对象的容器列表定义
            spec.containers[].name  String  定义容器的名字
            spec.containers[].image String  容器的镜像名字

        2.主要对象
            spec.containers[].imagePullPolicy           String  定义镜像拉去策略，由Always(每次都拉新的),Never（仅使用本地）,IfNotPresent（本地没有就拉取） 默认是Always
            spec.containers[].command[]                 List    指定容器启动命令，不指定为默认
            spec.containers[].args[]                    list    启动命令参数
            spec.containers[].workingDir                String  指定容器工作目录
            spec.containers[].volumeMounts[]            list    指定容器内部的存储卷配置
            spec.containers[].volumeMounts[].name       String  指定可以被容器挂载的存储卷的名字
            spec.containers[].volumeMounts[].mountPath  String  指定可以被容器挂载的存储卷的路径
            spec.containers[].volumeMounts[].readOnly   String  设置存储卷路径的读写模式，ture或者false，默认为读写模式
            spec.containers[].ports[]                   list    指定容器用到的端口列表
            spec.containers[].ports[].name              String  指定端口名字
            spec.containers[].ports[].containerPort     String  指定容器监听的端口
            spec.containers[].ports[].hostPort          String  指定主句需要监听的端口，默认与containerPort相同，设置了hostPort,同一台主机无法启动该容器的相同副本
            spec.containers[].ports[].protocol          String  端口协议，TCP和UDP
            spec.containers[].env[]                     list    环境变量列表
            spec.containers[].env[].name                String  指定环境变量名称
            spec.containers[].env[].value               String  指定环境变量值
            spec.containers[].resources                 Object  指定资源限制和资源请求值
            spec.containers[].resources.limits          Object  治党容器运行时资源上限
            spec.containers[].resources.limits.cpu
            spec.containers[].resources.limits.memory           单位为MIB,GiB
            spec.containers[].resources.requests        Object  指定容器启动和调度时的限制设置
            spec.containers[].resources.requests.cpu
            spec.containers[].resources.requests.memory

        3.额外的选项
            spec.restartPolicy                          String  pod重启策略，Always(默认，一旦终止，就重启),OnFailure(如果正常结束，退出码为0，就不重启),Never(不会重启)
            spec.nodeSelector                           Object  定义Node的Label过滤标签，以key：value格式指定
            spec.imagePullSecrets                       Object  定义pull镜像时使用的secret名称，以name.secretkey格式指定
            spec.hostNetwrok                            Boolean 定义是否使用主机网络，默认为false。true表示使用宿主机网络，而不是用网桥。


        4.命令  kubectl explain

          比如，这样，可以看具体的说明
          kubectl explain pod
          KIND:     Pod
          VERSION:  v1

          DESCRIPTION:
               Pod is a collection of containers that can run on a host. This resource is
               created by clients and scheduled onto hosts.

          FIELDS:
             apiVersion   <string>
               APIVersion defines the versioned schema of this representation of an
               object. Servers should convert recognized schemas to the latest internal
               value, and may reject unrecognized values. More info:
               https://git.k8s.io/community/contributors/devel/api-conventions.md#resources

             kind <string>
               Kind is a string value representing the REST resource this object
               represents. Servers may infer this from the endpoint the client submits
               requests to. Cannot be updated. In CamelCase. More info:
               https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds

             metadata     <Object>
               Standard object's metadata. More info:
               https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

             spec <Object>
               Specification of the desired behavior of the pod. More info:
               https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

             status       <Object>
               Most recently observed status of the pod. This data may not be up to date.
               Populated by the system. Read-only. More info:
               https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

            例如
           ~]#  kubectl explain pod.apiVersion
           KIND:     Pod
           VERSION:  v1

           FIELD:    apiVersion <string>

           DESCRIPTION:
                APIVersion defines the versioned schema of this representation of an
                object. Servers should convert recognized schemas to the latest internal
                value, and may reject unrecognized values. More info:
                https://git.k8s.io/community/contributors/devel/api-conventions.md#resources

             https://git.k8s.io/community/contributors/devel/api-conventions.md#resources 这个网址的信息，最全

    4.示例
    apiVersion: v1
    kind: pod
    metadata:
        name: myapp-pod
        labels:
            app: myapp
            version: v1
    spec:
        containers:
         -name: app
          image: harbor.phantom5702.com/library/myapp:v1
         -name: test
          image: harbor.phantom5702.com/library/myapp:v1


     ~]# kubectl describe pod myapp-pod  #查看详情
     从详情中找到报错的容器

     kubectl log  myapp-pod -c test # -c 指定容器


    5. pod生命周期
        1.init c
            Pod能够具有多个容器，应用运行在容器里面，但是它也可能有一个或多个先于应用容器启动的Init容器
            Init容器与普通的容器非常像，除了如下两点：
                ØInit容器总是运行到成功完成为止
                Ø每个Init容器都必须在下一个Init容器启动之前成功完成

                如果Pod的Init容器失败，Kubernetes会不断地重启该Pod，直到Init容器成功为止。然而，如果Pod对应的restartPolicy为Never，它不会重新启动

            因为Init容器具有与应用程序容器分离的单独镜像，所以它们的启动相关代码具有如下优势：
                Ø它们可以包含并运行实用工具，但是出于安全考虑，是不建议在应用程序容器镜像中包含这些实用工具的
                Ø它们可以包含使用工具和定制化代码来安装，但是不能出现在应用程序镜像中。例如，创建镜像没必要FROM另一个镜像，只需要在安装过程中使用类似sed、awk、python或dig这样的工具。
                Ø应用程序镜像可以分离出创建和部署的角色，而没有必要联合它们构建一个单独的镜像。
                ØInit容器使用LinuxNamespace，所以相对应用程序容器来说具有不同的文件系统视图。因此，它们能够具有访问Secret的权限，而应用程序容器则不能。
                Ø它们必须在应用程序容器启动之前运行完成，而应用程序容器是并行运行的，所以Init容器能够提供了一种简单的阻塞或延迟应用容器的启动的方法，直到满足了一组先决条件。

        apiVersion: v1
        kind: Pod
        metadata:
            name: myapp-pod
            labels:
                app: myapp
        spec:
            containers:
            - name: myapp-container
              image: busybox
              command: ['sh','-c','echo The app is running! && sleep 3600']
            initContainers:
            - name: init-myservice
              image: busybox
              command: ['sh','-c','until nslookup myservice; do echo waiting for myservice; sleep 2;done;']
            - name: init-mydb
              image: busybox
              command: ['sh','-c','until nslookup mydb; do echo waiting for mydb; sleep 2; done;']


        //main c 主要输出一句话 ，，，定义一组 initc 不停的等待 myserver和mydb ， nslookup是域名查询命令，可以在linux和windows平台上查询域名对应的iP地址
        ~]# kubectl  create -f initc.yaml
        pod/myapp-pod created
        [root@iZ8vb9oywzkx86ud7t818hZ ~]# kubectl get pod
        NAME        READY   STATUS     RESTARTS   AGE
        myapp-pod   0/1     Init:0/2   0          8s

        然后 kubectl describe pod  myapp-pod 可以看到initc进程都失败了
        kubectl log myapp-pod -c init-myservice 也看到initc 的 log

        创建svc

        kind: Service
        apiVersion: v1
        metadata:
            name: myservice
        spec:
            ports:
             - protocol: TCP
               port: 80
               targetPort: 9376

        //创建myservice  并暴露端口
        Z ~]# kubectl get pods
        NAME        READY   STATUS     RESTARTS   AGE
        myapp-pod   0/1     Init:1/2   0          5m5s

        //查看 system的pod
        ~]# kubectl get pod -n kube-system
        NAME                                              READY   STATUS    RESTARTS   AGE
        coredns-5c98db65d4-lhkg2                          1/1     Running   0          2d1h
        coredns-5c98db65d4-q2x28                          1/1     Running   0          2d1h
        etcd-iz8vb9oywzkx86ud7t818hz                      1/1     Running   0          2d1h
        kube-apiserver-iz8vb9oywzkx86ud7t818hz            1/1     Running   0          2d1h
        kube-controller-manager-iz8vb9oywzkx86ud7t818hz   1/1     Running   0          2d1h
        kube-flannel-ds-jlx7x                             1/1     Running   0          2d1h
        kube-flannel-ds-rhsc4                             1/1     Running   0          2d1h
        kube-flannel-ds-vql6n                             1/1     Running   0          2d1h
        kube-proxy-6dpwg                                  1/1     Running   0          2d1h
        kube-proxy-ns4zj                                  1/1     Running   0          2d1h
        kube-proxy-t988v                                  1/1     Running   0          2d1h
        kube-scheduler-iz8vb9oywzkx86ud7t818hz            1/1     Running   0          2d1h

        可以看到coredns，这里通过nod 通过coredns解析service

        然后创建mydb

        kind: Service
        apiVersion: v1
        metadata:
            name: mydb
        spec:
            ports:
            - protocol: TCP
              port: 80
              targetPort: 9377

        之后启动成功，这样可以用inic控制启动
        ~]# kubectl get pod
        NAME        READY   STATUS    RESTARTS   AGE
        myapp-pod   1/1     Running   0          38m


        *在Pod启动过程中，Init容器会按顺序在网络和数据卷初始化之后启动。 每个容器必须在下一个容器启动之前成功退出

        *如果由于运行时或失败退出，将导致容器启动失败，它会根据Pod的restartPolicy指定的策略进行重试。然而，如果Pod的restartPolicy设置为Always，Init容器失败时会使用RestartPolicy策略

        *在所有的Init容器没有成功之前，Pod将不会变成Ready状态。Init容器的端口将不会在Service中进行聚集。正在初始化中的Pod处于Pending状态，
         但应该会将Initializing状态设置为truep如果Pod重启，所有Init容器必须重新执行

        *#对Init容器spec的修改被限制在容器image字段，修改其他字段都不会生效。更改Init容器的image字段，等价于重启该Pod

        *Init容器具有应用容器的所有字段。除了readinessProbe，因为Init容器无法定义不同于完成（completion）的就绪（readiness）之外的其他状态。这会在验证过程中强制执行

        *在Pod中的每个app和Init容器的名称必须唯一；与任何其它容器共享同一个名称，会在验证时抛出错误


        2.探针
            探针是由kubelet对容器执行的定期诊断。要执行诊断，kubelet调用由容器实现的Handler。有三种类型的处理程序：

                ØExecAction：在容器内执行指定命令。如果命令退出时返回码为0则认为诊断成功。

                ØTCPSocketAction：对指定端口上的容器的IP地址进行TCP检查。如果端口打开，则诊断被认为是成功的。

                ØHTTPGetAction：对指定的端口和路径上的容器的IP地址执行HTTPGet请求。如果响应的状态码大于等于200且小于400，则诊断被认为是成功的


            每次探测都将获得以下三种结果之一：
                Ø成功：容器通过了诊断。
                Ø失败：容器未通过诊断。
                Ø未知：诊断失败，因此不会采取任何行动

            探测方式:
                livenessProbe：指示容器是否正在运行。如果存活探测失败，则kubelet会杀死容器，并且容器将受到其重启策略的影响。如果容器不提供存活探针，则默认状态为Success

                readinessProbe：指示容器是否准备好服务请求。如果就绪探测失败，端点控制器将从与Pod匹配的所有Service的端点中删除该Pod的IP地址。
                                初始延迟之前的就绪状态默认为Failure。如果容器不提供就绪探针，则默认状态为Success


                Podhook（钩子）是由Kubernetes管理的kubelet发起的，当容器中的进程启动前或者容器中的进程终止之前运行，这是包含在容器的生命周期之中。
                可以同时为Pod中的所有容器都配置hookHook的类型包括两种：
                exec：执行一段命令
                HTTP：发送HTTP请求


                PodSpec中有一个restartPolicy字段，可能的值为Always、OnFailure和Never。默认为Always。
                restartPolicy适用于Pod中的所有容器。restartPolicy仅指通过同一节点上的kubelet重新启动容器。
                失败的容器由kubelet以五分钟为上限的指数退避延迟（10秒，20秒，40秒...）重新启动，并在成功执行十分钟后重置。
                如Pod文档中所述，一旦绑定到一个节点，Pod将永远不会重新绑定到另一个节点。

                Pod的status字段是一个PodStatus对象，PodStatus中有一个phase字段。
                Pod的相位（phase）是Pod在其生命周期中的简单宏观概述。
                该阶段并不是对容器或Pod的综合汇总，也不是为了做为综合状态机Pod相位的数量和含义是严格指定的。
                除了本文档中列举的状态外，不应该再假定Pod有其他的phase值

                挂起（Pending）：Pod已被Kubernetes系统接受，但有一个或者多个容器镜像尚未创建。等待时间包括调度Pod的时间和通过网络下载镜像的时间，这可能需要花点时间
                运行中（Running）：该Pod已经绑定到了一个节点上，Pod中所有的容器都已被创建。至少有一个容器正在运行，或者正处于启动或重启状态
                成功（Succeeded）：Pod中的所有容器都被成功终止，并且不会再重启
                失败（Failed）：Pod中的所有容器都已终止了，并且至少有一个容器是因为失败终止。也就是说，容器以非0状态退出或者被系统终止
                未知（Unknown）：因为某些原因无法取得Pod的状态，通常是因为与Pod所在主机通信失败


            示例：
                1.探针检测-就绪检测
                readinessProbe-httpget

                apiVersion: v1
                kind: Pod
                metadata:
                    name: readiness-httpget-pod
                    namespace: default
                spec:
                    containers:
                    - name: readiness-httpget-container
                      image: harbor.phantom5702.com/library/myapp:v1
                      imagePullPolicy: IfNotPresent
                      readinessProbe:
                        httpGet:
                          port: 80
                          path: /index1.html
                        initialDelaySeconds: 1
                        periodSeconds: 3


               Z ~]# kubectl  get pods
               NAME                    READY   STATUS    RESTARTS   AGE
               myapp-pod               1/1     Running   0          70m
               readiness-httpget-pod   0/1     Running   0          34s

               运行起来没有就绪
                通过describe 获取错误信息
                 Readiness probe failed: HTTP probe failed with statuscode: 404


                kubectl  exec readiness-httpget-pod  -it -- /bin/sh 进入容器进入nginx目录创建index1.html
                注意这个exec， 如果pod由多个容器，需要用 -c 指定容器

                 ~]# kubectl get pods
                NAME                    READY   STATUS    RESTARTS   AGE
                myapp-pod               1/1     Running   0          73m
                readiness-httpget-pod   1/1     Running   0          3m54s

                探针检测成功，启动成功


                2.检测探针-存活检测
                    livenessProbe-exec

                apiVersion: v1
                kind: Pod
                metadata:
                    name: liveness-exec-pod
                    namespace: default
                spec:
                    containers:
                    - name: liveness-exec-container
                      image: busybox
                      imagePullPolicy: IfNotPresent
                      command: ["/bin/sh","-c","touch /tmp/live ; sleep 60; rm -rf /tmp/live; sleep 3600"]
                      livenessProbe:
                        exec:
                          command: ["test","-e","/tmp/live"]
                        initialDelaySeconds: 1
                        periodSeconds: 3

                //这里容器运行，创建文件，休眠，然后删除文件， livenessProbe 检测文件有没有

                ~]# kubectl get pod
                NAME                    READY   STATUS    RESTARTS   AGE
                liveness-exec-pod       1/1     Running   2          3m42s
                myapp-pod               1/1     Running   0          87m
                readiness-httpget-pod   1/1     Running   0          17m

                这能能检测到，重启了

                3.livenessProbe-httpget
                apiVersion: v1
                kind: Pod
                metadata:
                    name: liveness-httpget-pod
                    namespace: default
                spec:
                    containers:
                      - name: liveness-httpget-container
                        image: harbor.phantom5702.com/library/myapp:v1
                        imagePullPolicy: IfNotPresent
                        ports:
                        - name: http
                          containerPort: 80
                        livenessProbe:
                            httpGet:
                                port: http
                                path: /index.html
                            initialDelaySeconds: 1
                            periodSeconds: 3
                            timeoutSeconds: 10

                进入容器干掉html之后，，容器重启


                4.livenessProbe-tcp
                    apiVersion: v1
                    kind: Pod
                    metadata:
                        name: probe-tcp
                    spec:
                        containers:
                        - name: nginx
                          image: hub.atguigu.com/library/myapp:v1
                          livenessProbe:
                              initialDelaySeconds: 5
                              timeoutSeconds: 1
                              tcpSocket:
                                port: 80
                这个通过tcp检测

                5.启动、退出动作
                apiVersion: v1
                kind: Pod
                metadata:
                    name: lifecycle-demo
                spec:
                    containers:
                    - name: lifecycle-demo-container
                      image: nginx
                      lifecycle:
                        postStart:
                          exec:
                            command: ["/bin/sh", "-c", "echo Hello from the postStart handler >/usr/share/message"]
                        preStop:
                          exec:
                             command: ["/bin/sh", "-c", "echo Hello from the poststop handler >/usr/share/message"]

                指定启动退出动作



        3.