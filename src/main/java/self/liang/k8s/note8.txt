1.k8s 服务暴露
 常用的ingress插件： Ingress-nginx
                    Haproxy
                    traefix

https://github.com/traefik/traefik

2.部署traefik
    同样的,现在7.200完成docker镜像拉取和配置清单创建,然后再到任意master节点执行配置清单
    2.1 准备docker镜像
    docker pull traefik:v1.7.2-alpine
    docker tag  traefik:v1.7.2-alpine harbor.phantom5702.com/public/traefik:v1.7.2
    docker push harbor.phantom5702.com/public/traefik:v1.7.2
    docker pull harbor.phantom5702.com/public/traefik:v1.7.2
    2.2 创建资源清单
    mkdir -p /data/k8syaml/traefik


    2.2.1 rbac授权清单
    cat >/data/k8syaml/traefik/rbac.yaml <<EOF
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: traefik-ingress-controller
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRole
    metadata:
      name: traefik-ingress-controller
    rules:
      - apiGroups:
          - ""
        resources:
          - services
          - endpoints
          - secrets
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - extensions
        resources:
          - ingresses
        verbs:
          - get
          - list
          - watch
    ---
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1beta1
    metadata:
      name: traefik-ingress-controller
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: traefik-ingress-controller
    subjects:
    - kind: ServiceAccount
      name: traefik-ingress-controller
      namespace: kube-system
    EOF


    2.2.2 delepoly资源清单

    cat >/data/k8syaml/traefik/ds.yaml <<EOF
    apiVersion: extensions/v1beta1
    kind: DaemonSet
    metadata:
      name: traefik-ingress
      namespace: kube-system
      labels:
        k8s-app: traefik-ingress
    spec:
      template:
        metadata:
          labels:
            k8s-app: traefik-ingress
            name: traefik-ingress
        spec:
          serviceAccountName: traefik-ingress-controller
          terminationGracePeriodSeconds: 60
          containers:
          - image: harbor.phantom5702.com/public/traefik:v1.7.2
            name: traefik-ingress
            ports:
            - name: controller
              containerPort: 80
              hostPort: 81
            - name: admin-web
              containerPort: 8080
            securityContext:
              capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            args:
            - --api
            - --kubernetes
            - --logLevel=INFO
            - --insecureskipverify=true
            - --kubernetes.endpoint=https://server.phantom5702.com:7443
            - --accesslog
            - --accesslog.filepath=/var/log/traefik_access.log
            - --traefiklog
            - --traefiklog.filepath=/var/log/traefik.log
            - --metrics.prometheus
    EOF


    2.2.3 service清单

    cat >/data/k8syaml/traefik/svc.yaml <<EOF
    kind: Service
    apiVersion: v1
    metadata:
      name: traefik-ingress-service
      namespace: kube-system
    spec:
      selector:
        k8s-app: traefik-ingress
      ports:
        - protocol: TCP
          port: 80
          name: controller
        - protocol: TCP
          port: 8080
          name: admin-web
    EOF

    2.2.4 ingress清单

    cat >/data/k8syaml/traefik/ingress.yaml <<EOF
    apiVersion: extensions/v1beta1
    kind: Ingress
    metadata:
      name: traefik-web-ui
      namespace: kube-system
      annotations:
        kubernetes.io/ingress.class: traefik
    spec:
      rules:
      - host: traefik.zq.com
        http:
          paths:
          - path: /
            backend:
              serviceName: traefik-ingress-service
              servicePort: 8080
    EOF


2.3 创建资源
    2.3.1 任意节点上创建资源
    kubectl create -f http://k8syaml.phantom5702.com/traefik/rbac.yaml
    kubectl create -f http://k8syaml.phantom5702.com/traefik/ds.yaml
    kubectl create -f http://k8syaml.phantom5702.com/traefik/svc.yaml
    kubectl create -f http://k8syaml.phantom5702.com/traefik/ingress.yaml
    2.3.2 在前端nginx上做反向代理
    在7.11和7.12上,都做反向代理,将泛域名的解析都转发到traefik上去
    cat >/etc/nginx/conf.d/zq.com.conf <<'EOF'
    upstream default_backend_traefik {
        server 172.26.216.163:81    max_fails=3 fail_timeout=10s;
        server 172.26.216.164:81    max_fails=3 fail_timeout=10s;
    }
    server {
        server_name *.phantom5702.com;

        location / {
            proxy_pass http://default_backend_traefik;
            proxy_set_header Host       $http_host;
            proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;
        }
    }
    EOF
    # 重启nginx服务
    nginx -t
    nginx -s reload
    2.3.3 在bind9中添加域名解析   这里我是把dns解析到ecs上
    需要将traefik 服务的解析记录添加的DNS解析中,注意是绑定到VIP上
    vi /var/named/zq.com.zone
    ........
    traefik            A    10.4.7.10
    注意前滚serial编号
    重启named服务
    systemctl restart named
    #dig验证解析结果
    [root@hdss7-11 ~]# dig -t A traefik.phantom5702.com +short
    10.4.7.10
    2.3.4 在集群外访问验证
    在集群外,访问http://traefik.phantom5702.com,如果能正常显示web页面.说明我们已经暴露服务成功