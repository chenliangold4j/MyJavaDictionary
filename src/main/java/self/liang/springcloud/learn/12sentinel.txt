1.sentinel
随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。

Sentinel 具有以下特征:

丰富的应用场景：
    Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，
    例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。
完备的实时监控：
    Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。
广泛的开源生态：
    Sentinel 提供开箱即用的与其它开源框架/库的整合模块，
    例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。
完善的 SPI 扩展点：
    Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。


    hystrix的一些缺点：
        1.自己搭建监控平台。
        2.细分配置的话有大量的注解标签要配置，会显得杂乱。

2.sentinel-dashboard-1.7.2.jar 前台监控页面
3.项目配置监控地址
    spring:
      application:
        name: cloudalibaba-sentinel-service
      cloud:
        nacos:
          discovery:
            # Nacos服务注册中心地址
            server-addr: localhost
        sentinel:
          transport:
            # sentinel dashboard 地址
            dashboard: localhost:8080
            # 默认为8719，如果被占用会自动+1，直到找到为止
            port: 8719
4.流控规则：
    https://github.com/alibaba/Sentinel/wiki/
    1.直接
        1.qps失败  达到qps限流
        2.线程数失败  超过线程数量，直接失败
    2.关联
        当与A关联的资源B达到阈值后，就限流自己
         例如：支付资源不够，限制订单请求。
    3.链路
        多个链路调用同一个微服务

    流控效果：
    1.快速失败。字面意思
    2.warm up
        公式：阈值除以coldFactor（默认为3），经过预热时长之后才会达到阈值
        例如：90 qps限制 一开始其实是30qps限制，经过预热时间过后，会到90

    3.排队等待：
        只能排队。阈值类型必须设置成qps，否则无效。超过qps就排队，同时设置排队等待时间。
        对应漏桶算法。
        主要应用在间歇性大量冲击，希望把请求平摊在几秒内。
5.服务降级：
    配置降级的时间窗口都是指回复时间。
    1.RT  平均响应时间
        超出阈值 且 在时间窗口内通过的请求>=5 两个条件都满足后触发降级
        窗口期过后，关闭断路器。
        RT最大4900
    2.异常比例数：
        QPS>=5 且异常比例超过阈值 触发降级，时间窗口后关闭降级。
    3.异常数，字面意思。

6.热点key限流
    https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81
    配置对哪个参数进行热点限流。
    @SentinelResource(value = "testHotKey",blockHandler = "deal_testHotKey",fallback = "deal_testHotKey")

    参数例外项。详情见文档。

7.系统规则：
    Sentinel 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监控指标，
    通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。

    系统规则支持以下的模式：

        1. Load 自适应（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，
         且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 maxQps * minRt 估算得出。设定参考值一般是 CPU cores * 2.5。
        2. CPU usage（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。
        3. 平均 RT：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。
        4. 并发线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。
        5. 入口 QPS：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。
8.@SentinelResource
   1. @SentinelResource(value = "byResource",blockHandler = "handleException")
    value 是资源名称。
    blockHandler 兜底方法。

   2.@SentinelResource(value = "customerBlockHandler",blockHandlerClass = MyBlockHandler.class,blockHandler = "handleException2")
    指定MyBlockHandler 类的handleException2方法处理流控。

   3.  @SentinelResource(value = "fallbackBase",
   fallback = "handlerFallback",blockHandler = "blockHandler",exceptionsToIgnore = IllegalArgumentException.class)
   异常忽略exceptionsToIgnore

9.持久化
    将限流规则保存在nacos.
    在消费端配置.
     sentinel:
           transport:
             # sentinel dashboard 地址
             dashboard: localhost:8080
             # 默认为8719，如果被占用会自动+1，直到找到为止
             port: 8719
           # 流控规则持久化到nacos
           datasource:
             dsl:
               nacos:
                 server-addr: localhost
                 data-id: ${spring.application.name}
                 group-id: DEFAULT_GROUP
                 data-type: json
                 rule-type: flow
