1.服务网关：
    为微服务架构提供一种简单有效的统一的api路由管理方式。

2.gateway特性：
    动态路由：能够匹配任何请求属性
    可以对路由 Predicate （断言） 和Filter （过滤器）
    继承hystrix 的断路器
    继承spring cloud服务发现功能
    请求限流
    路由重写

3.核心概念：
    路由route
    predicate断言
    filter 过滤器

4.基本步骤：
    1.yml配置路由
              routes:
                - id: payment_routh #payment_routh    #路由的ID，没有固定规则但要求唯一，简易配合服务名
                  uri: http://localhost:8001         #匹配后提供服务的路由地址
        #          uri: lb://cloud-provider-service   #匹配后提供服务的路由地址
                  predicates:
                    - Path=/payment/get/**          #断言，路径相匹配的进行路由

                - id: payment_routh2 #payment_routh   #路由的ID，没有固定规则但要求唯一，简易配合服务名
                  uri: http://localhost:8001          #匹配后提供服务的路由地址
        #          uri: lb://cloud-provider-service     #匹配后提供服务的路由地址
                  predicates:
                    - Path=/payment/test/**             #断言，路径相匹配的进行路由

    2.代码配置
        @Configuration
        public class GatewayConfig {
            /**
             * 配置一个id为route-name的路由规则，
             * 当访问地址http://localhost:9527/guonei时会自动转发到地址：http://news.baidu.com/guonei
             * @param routeLocatorBuilder
             * @return
             */
            @SuppressWarnings("JavaDoc")
            @Bean
            public RouteLocator customRouteLocator(RouteLocatorBuilder routeLocatorBuilder){
                RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();
                routes.route("path_route_bd_news",
                        r -> r.path("/guonei")
                                .uri("http://news.baidu.com/guonei")).build();
                return routes.build();
            }

        }
5.动态路由：
    配置见项目
    所有的路由配置类都继承自：RoutePredicateFactory
     predicates:
                - Path=/payment/test/**             #断言，路径相匹配的进行路由
                #- After=2020-03-15T15:35:07.412+08:00[GMT+08:00]    可用于服务定时上线类似的还有before   between
                #- Cookie=username,zzyy           如果带有的cookie符合  有名为username ，值符合zzyy的正则，则路由
                #- Header=X-Request-Id, \d+ #请求头要有X-Request-Id属性并且值为整数的正则表达式
                #- Host=**.atguigu.com
                #- Method=GET
                #- Query=username, \d+ #要有参数名username并且值还要啥整数才能路由

6.filter
    自带的过滤器类型有几十种，详情搜索
    自定义过滤器：
    @Slf4j
    @Component
    public class MyFilter implements GlobalFilter, Ordered {
        @Override
        public int getOrder() {
            return 0;
        }

        @Override
        public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
            log.info("***********come in MyLogGateWayFilter: "+new Date());
            String uname = exchange.getRequest().getQueryParams().getFirst("uname");//每次进来后判断带不带uname这个key
            if(uname == null){
                log.info("*********用户名为null ，非法用户，o(╥﹏╥)o");
                exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);    //uname为null非法用户
                return exchange.getResponse().setComplete();
            }
            return chain.filter(exchange);
        }
    }
