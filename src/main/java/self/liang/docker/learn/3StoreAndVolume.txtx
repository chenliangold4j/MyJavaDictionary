第四章：持久化存储和卷间状态共享。
    1）存储卷的简介：
        存储卷时容器目录树上的挂载点。大多书人只熟悉一点点文件系统和挂载点，比起其他的docker话题，存储卷会更难一点。这与挂载点的缺乏了解有关。
        Union文件系统适用于构建和分享镜像，但对于持久化或共享数据 而言，并不是理想的方法。存储卷填补了这些用例。

        1）存储卷提供容器无关的数据管理方式
        2）NoSQL数据库使用存储卷
            示例：apache Cassandra
            安装cassandra数据库并启动命令行
                                    (容器中指定储存卷的挂载点。)
            docker run -d --volume /var/lib/cassandra/data --name my-cass alpine echo Data Container

            #Alpine 操作系统是一个面向安全的轻型 Linux 发行版。它不同于通常 Linux 发行版，Alpine 采用了 musl libc 和 busybox
            #以减小系统的体积和运行时资源消耗，但功能上比 busybox 又完善的多，因此得到开源社区越来越多的青睐

            #BusyBox 是一个集成了三百多个最常用Linux命令和工具的软件。BusyBox 包含了一些简单的工具，例如ls、cat和echo等等，
            #还包含了一些更大、更复杂的工具，例grep、find、mount以及telnet。有些人将 BusyBox 称为 Linux 工具里的瑞士军刀。
            #简单的说BusyBox就好像是个大工具箱，它集成压缩了 Linux 的许多工具和命令，也包含了 Android 系统的自带的shell。

            #BusyBox 将许多具有共性的小版本的UNIX工具结合到一个单一的可执行文件。这样的集合可以替代大部分常用工具比如的GNU fileutils ，
            # shellutils等工具，BusyBox提供了一个比较完善的环境，可以适用于任何小的嵌入式系统。

            # 安装cass
                            (继承了存储卷定义)
            docker run -d --volumes-from my-cass --name cass cassandra
            # 连接cqlsh命令行
            docker run -it --rm --link cass:cass cassandra cqlsh cass

            删库跑路（其实只是删除数据库，不删数据）
            quit
            docker stop cass
            docker rm -vf cass

            再搞一个cass容器，测试数据是否存在，经测试已经存在

            docker run -d --volumes-from my-cass --name cass2 cassandra
            docker run -it --rm --link cass2:cass cassandra cqlsh cass
            describe keyspaces
            quit
            docker stop cass2
            docker rm -vf cass2

            该案例结束，毁尸灭迹
            docker rm -vf my-cass

            docker rm [OPTIONS] CONTAINER [CONTAINER...]
            OPTIONS说明：
            -f :通过 SIGKILL 信号强制删除一个运行中的容器。

            -l :移除容器间的网络连接，而非容器本身。

            -v :删除与容器关联的卷

        2) 普通文件示例：


    2）存储卷的类型
        Docker的数据持久化主要有两种方式：
        bind mount   用主机目录绑定  和路径强关联
        volume      用docker管理的卷绑定   和主机路径无关联
        1）首先是bind mount
          docker run -it -v /home/liang/data:/container-data alpine sh
             这里我在alpine 中的container-data 新增文件反映在了我的ubuntu上。。
                bind mount自docker早期便开始为人们使用了，用于将host机器的目录mount到container中。但是bind mount在不同的宿主机系统时不可移植的，
                比如Windows和Linux的目录结构是不一样的，bind mount所指向的host目录也不能一样。
                这也是为什么bind mount不能出现在Dockerfile中的原因，因为这样Dockerfile就不可移植了。

                将host机器上当前目录下的host-data目录mount到container中的/container-data目录：
                docker run -it -v $(pwd)/host-dava:/container-data alpine sh
                有几点需要注意：
                host机器的目录路径必须为全路径(准确的说需要以/或~/开始的路径)，不然docker会将其当做volume而不是volume处理
                如果host机器上的目录不存在，docker会自动创建该目录
                如果container中的目录不存在，docker会自动创建该目录
                如果container中的目录已经有内容，那么docker会使用host上的目录将其覆盖掉

        2）volume也是绕过container的文件系统，直接将数据写到host机器上，
          只是volume是被docker管理的，docker下所有的volume都在host机器上的指定目录下/var/lib/docker/volumes。

          将my-volume挂载到container中的/mydata目录：
          docker run -it -v my-volume:/mydata alpine sh

          docker volume inspect my-volume
          [
              {
                  "CreatedAt": "2019-12-17T15:01:38+08:00",
                  "Driver": "local",
                  "Labels": null,
                  "Mountpoint": "/var/lib/docker/volumes/my-volume/_data",
                  "Name": "my-volume",
                  "Options": null,
                  "Scope": "local"
              }
          ]
        可以看到，volume在host机器的目录为/var/lib/docker/volumes/my-volume/_data。此时，如果my-volume不存在，那么docker会自动创建my-volume，然后再挂载。

        也可以不指定host上的volume：

        docker run -it -v /mydata alpine sh
        此时docker将自动创建一个匿名的volume，并将其挂载到container中的/mydata目录。匿名volume在host机器上的目录路径类似于：
        /var/lib/docker/volumes/300c2264cd0acfe862507eedf156eb61c197720f69e7e9a053c87c2182b2e7d8/_data。

        除了让docker帮我们自动创建volume，我们也可以自行创建：

        docker volume create my-volume-2
        然后将这个已有的my-volume-2挂载到container中:

        docker run -it -v my-volume-2:/mydata alpine sh
        需要注意的是，与bind mount不同的是，如果volume是空的而container中的目录有内容，
        那么docker会将container目录中的内容拷贝到volume中，
        但是如果volume中已经有内容，则会将container中的目录覆盖

        3)容器共享数据
          一个容器引用另一个容器的volume，比如之前的cass容器引用my-cass-shared容器的volume，语法是volumes-from
    3)管理卷的生命周期
        1）管理卷的删除
        删除容器时，使用docker rm -v命令，-v命令会删除容器依赖的卷，但是如果卷被其他容器所依赖，就不会被删除。
        如果删除容器时，不使用-v命令，会导致卷成为孤立的块，虽然可以用命令删除，但是很麻烦。所以建议在删除容器的时候使用-v命令。
        删除所有的在停止状态的容器

        docker rm -v $(docker ps -aq)
        2）卷的高级模式
            1)卷容器模式
            创建一个依赖主机卷的容器，让其他容器依赖该容器，使用–volumes-from
            卷容器模式的进阶版：数据卷容器
            其实就是卷容器把另一个区域的数据拷贝到卷指向的位置，其他容器就能够共享这些数据。

            docker run --name my-shared -v /config dockerinaction/ch4_packed /bin/sh -c 'cp /packed/* /config/'
            docker run --rm --volumes-from my-shared alpine ls /config
            \
            2)多态容器模式
            编程语言中的多态表示一种规范，多种实现。容器的多态指的是你创建一个容器的同时还可以额外增加一些命令，比如之前的echo ‘Helloworld’, /bin/sh -c 'xxx’等。
            我们使用数据卷容器来模拟开发和生产环境配置的打包

            # 本地配置
            docker run --name dev-conf -v /config dockerinaction/ch4_packed_config /bin/sh -c 'cp /development/* /config/'
            # 生产配置
            docker run --name prod-conf -v /config dockerinaction/ch4_packed_config /bin/sh -c 'cp /production/* /config/'
            # 加载本地配置
            docker run --name dev-app --volumes-from dev-conf dockerinaction/ch4_polyapp
            # 加载生产配置
            docker run --name prod-app --volumes-from prod-conf dockerinaction/ch4_polyapp

