1.docker的网络：
    docker关心两种网络，单主机虚拟网络和多主机虚拟网络。
    1） docker网络的四种模型：
        1）Closed容器
            不允许任何的网络流量，只能访问本地回环接口。
            docker run   --net none  创建closed容器。。实际用处不大。。
        2）bridged容器
            放开了网络的隔离程度，容易入手。可定制性最高。是最佳实践。
            所有链接都经过docker虚拟网桥接口。是同一个虚拟子网的一部分。

            1）访问外部网络：  --net bridge 其实就是默认。
                docker run --net bridge alpine:latest ip addr  //创建容器并列出接口。
                docker run --rm alpine:latest ping -w 2 www.baidu.com   //运行并ping 测试是否有网络。

            2）自定义命名解析
                --hostname  暂时略过

            3）开放对容器的访问：
                bridged容器，默认不能被主机网络访问
                用-p --publish=[] 选项，
                1）将容器端口绑定到所有主机接口的一个动态端口上。
                    docker run -p 3333 ...
                2) 将一个具体的容器端口，绑定到每一个主机接口的某一个具体接口上
                     docker run -p 3333：3333
                3）将容器端口绑定到指定ip地址主机接口的动态端口上：
                    docker -run -p 192.168.0.32:2222 ...
                4)将容器端口绑定到指定ip地址主机接口的具体端口上：
                     docker -run -p 192.168.0.32:2222：2222 ...

                使用-P命令暴露容器所有端口, --expose命名表示暴露指定端口
                docker run -d --name expose-test --expose 8000 -P dockerinaction/ch5_expose
                docker port expose-test

            4) 跨容器通信：
                    目前位置，所有容器都是使用Docker桥接网络来与其他容器或者主机网络进行通信。
                    实际测试，容器内部用172.17.0.  网段通信。
                    可以用 --icc=false禁止容器通信
            5）修改网桥配置：
                docker -d --bip "192.168.0.128"
                # 或 CIDR表示无类域间路由
                docker -d --fixed-cidr "192.168.0.192/26"
                # 设置mtu
                docker -d mtu 1200
                # 创建一个网桥，这个需要对linux内核有深入的理解，知道有这么个玩意就ok了
                docker -d -b mybridge
        3）joined容器
            容器共享一个网络栈，容器之间没有隔离。
            连接容器允许容器之间互连

            docker run -d --name join-test --net none alpine nc -l 127.0.0.1:3333
            docker run -it --net container:join-test alpine netstat -al
        4）open开放容器
          危险的容器，畅通无阻访问网络

          docker run --rm --net host alpine ip addr
    2）跨容器依赖
        1）链接---本地服务发现：
            当你创建一个新容器，你可以告诉docker，将它和另一个容器想链接。当新容器创建时，目标容器必须正在运行。
            只有容器在运行，他们才能维持其ip地址。
            为容器添加链接会发生三件事：
                1.描述目标容器的环境变量会被创建
                2.链接的别名和对应的目标容器ip地址会被添加到dns覆盖列表中。
                3.最有趣的是，如果跨容器通信被禁止了，docker会添加特定防火墙规则来允许被链接容器间的通信
            docker –link 解析

            我们可以通过如下的命令将两个docker 容器关联起来。但是内部是如何关联的呢？
            docker run –name redis -d /redis
            docker run –link redis:db -i -t ubuntu:14.04 /bin/bash**

            docker学习笔记：容器的网络设置
            创建一个docker容器，docker系统会自动为该容器分配一个ip地址，通常是172.17开头。

            我们可以在主机上用 docker inspect 命令 或者进入容器用ifconfig命令来查看容器的ip地址。

            假设某个容器(假设容器的名称为myweb)被分配的地址是 172.17.0.2，该容器上启动了一个web服务，其端口号是80（注意这是容器中的端口号）。

            这时我们用docker port命令可以查看该web服务在容器的端口对应到主机端口的信息，如：

            docker port myweb

            输出
            80/tcp -> 0.0.0.0:32776

            一、这时我们在docker主机上可通过如下方式访问容器的服务

            1、方式一：

            curl  http://localhost:32776

            2、方式二：

            假设主机的ip地址为192.168.142.138

            curl  http://192.168.142.138:32776

            这样docker主机局域网内的机器就可以通过主机的地址和绑定的ip来访问到docker容器上的服务了。不过这存在的问题是，需要将容器端口与主机上端口的映射关系变成固定的。否则一旦容器重启，绑定端口就会变了。

            3、方式三：

            假设容器的ip地址为 172.17.0.2

            curl http://172.17.0.2:80



            二、其它容器访问该容器的web服务

            现在启动另外一个容器，在该容器中要访问myweb容器提供的web服务，可以用如下方式：

            1、方式一：直接通过容器的ip地址访问

            curl  http://172.17.0.2:80

            说明：这么做是可以的，但问题是容器的ip地址是自动分配的，一旦提供该web服务的容器重启后，其ip可能发生变化。这就导致原来指定的ip有问题了。

            2、方式二：通过主机地址和映射端口访问

            curl http://192.168.142.138:32776

            说明：这存在的问题是，端口的映射是自动的，容器一旦重启后会发生变化。



            总结下，如果某个容器提供了对外的服务（如web服务），则统一的访问方式可以利用docker主机的ip地址和容器映射到主机上的端口来统一访问。



            三、容器之间互联的另外一种方式

            docker提供了一种机制，可以让一个容器和另一个容器很方便的连接起来。举例：

            docker run --name test1 --link myweb:web -it ubuntu /bin/bash

            上面命令创建了一个新的容器test1。 这里引入了一个新的标记 --link，其参数部分的myweb表示要连接的容器，web是要连接的容器的别名。

            容器创建后，我们用 ping web命令发现能连接到myweb容器，这样因为用的不是ip地址，而是别名。这样即使myweb1容器重启后，上面创建的test1容器对其连接的代码或脚本也不用修改。

            假设myweb容器提供了web服务，容器内的端口是80.

            这时在test1容器内可以用如下方式访问：  curl  http://web:80

            显然，这种方式的优点是不再指定ip地址，即使 myweb容器重启后ip地址变了也没关系。

            注意：需要注意的是，如果myweb容器未启动，但有别的容器启动，test1容器利用别名web可能会关联到别的容器上，这是个问题。

        2)链接的本质和缺点：
            俩姐的本质就是静态的，具有方向性和无传递性的依赖。
