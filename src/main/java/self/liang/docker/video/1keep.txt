看书不太理解。。看视频继续并记录
容器：
    1.ctrl + p + q可以推出一些容器但是不停止  。例如centos . exit就停止了
    2.docker stop 优雅停止  和  docker kill 粗暴停止
    3.docker rm  删除容器 和  docker rmi 删除镜像 image
    4.docker rm -f $(docker ps -a -q) 批量删除  (docker ps -q 只显示id)
    重要：
     1.守护式启动容器  docker run -d image
        这种后台运行必须有一个前台进程。不然会自动退出
        正常情况下，再centos里配置nignx启动服务即可。但是用docker的话，需要见nignx配置为前台进程
     2.查看容器日志:
        docker logs -f -t --tail 容器ID
            -t 加入时间戳
            -f 跟随最新的日志打印
            --tail 数字 显示最后多少条
        例如
        docker logs -tf --tail 10 c034

     3.查看容器内进程
        docker top 容器ID

     4.查看容器内部细节
        docker inspect 容器ID

     5.进入正在运行的容器并以命令行交互
        打开新的终端               docker exec -it 容器ID /bin/bash
            docker exec -t 容器ID  ls -l /tmp  不进入容器直接运行命令
        重新进入不启动新的终端      docker attach 容器ID

     6.从容器内拷贝文件到主机上：
        docker cp 容器ID:容器内路径  目的主机路径
        例如 docker cp c034:/tmp/test.log D:/

     7 docker run -p 主机端口：容器端口
       docker run -P 大写P，Docker 会随机映射一个端口到内部容器开放的网络端口。
镜像：
    docker commit  提交容器副本使之成为一个新的镜像
    docker commit -m="提交的描述信息“  -a = ”作者“ 容器ID 要参加的目标镜像名：【标签名】
    例子：
        docker commit -a "liang" -m "commit test" 8aeaf test/mytomcat:1.2
        docker run -d -P test/mytomcat:1.2  之后用inspect找到端口。发现能够访问

容器数据卷：
    1.直接命令添加：
        docker run -it -v /宿主机绝对路径 :/容器内目录 镜像名
        例子： docker run -it -v d:/test/:/data centos
                容器内目录可以不存在，会新建立
        带权限的：  docker run -it -v /url:/url:ro 镜像名    ro: 只读  read only
    2.dockerfile添加：
        dockerfile不能用-v

        FROM centos
        VOLUME [ "/dataVolumeContainer1","/dataVolumeContainer2" ]
        CMD echo "finished,----success1"
        CMD /bin/bash

        然后docker build -t test/centos  D:\docker\test\ -t指定名字（images的名字） 之后是目录（这个要注意）
        之后run。根目录有volume的两个卷   这里没有指定。。是docker自动生成的宿主目录与之对应

    3.数据卷容器：
        用上一步的test/centos 并运行容器 dc1/dc2/dc3
        他们已经有容器卷dataVolumeContainer1 dataVolumeContainer2
        容器间传递共享(--volumes-from)
            步骤：
                1.启动父容器 dc01
                2.dc02和doc03继承dc01   --volumes-from   docker run -it --name dc02 --volumes-from dc01 test/centos
                3.回到dc01就可以看到02 03 各自添加的都能共享了
                4.这样只要有容器使用，，数据卷就会一直用下去

