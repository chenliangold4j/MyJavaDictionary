1.2pc 两阶段提交
    准备阶段 prepare phase 提交阶段 commit phase。事务管理器负责整个分布式事务的提交和回滚，事务参与者负责自己本地事务的提交和回滚。
    oracle和mysql支持两阶段提交
    1.准备阶段。事务管理器给每个参与者发送prepare消息，每个数据库参与者在本地执行事务，并写本地的undo/redo日志，此时事务没有提交。
        （undo 日志记录记录修改前的数据，用于回滚，redo日志记录修改后的数据，用于提交后写入）
    2.提交阶段。如果事务管理器收到失败或者超时，直接给每个参与者发送回滚消息，否则，发送commit。参与者根据指令执行。

2.seata方案。
    1.transaction coordinator  TC 事务协调器，它是独立中间件，需要独立部署运行。它维护全局事务的运行状态。接受TM 指令发起全局事务的提交与回滚。
    负责与RM 通信协调各分支事务的提交和回滚。
    2.transaction manager TM  事务管理器。TM 需要嵌入应用程序中工作，它负责开启一个全局事务，并最终向TC 发起全局提交或全局回滚的指令
    3.resource manager RM 控制分支事务，负责分支注册，状态汇报，并接受事务协调器TC 的指令，驱动分支事务的提交和回滚。


3.TCC
    TCC 是 try confirm cancel的缩写，TCC 要求每个分支事务实现3个操作：预处理try，确认confirm，撤销cancel。
    try操作做业务检查及资源预留，confirm 做业务确认操作，cancel实现一个与try相反的操作即回滚。

    只要try阶段成功，就认为confirm会成功。try 预留失败，就执行cancel操作。
    由于confirm和cancel失败需要重试，因此需要实现为幂等，幂等性是指同一个操作无论请求多少此，其结果相同。


    TCC解决方案：
    tcc-transaction
    Hmily
    ByteTCC
    EasyTransaction
    seata (seata 的 TCC 对springCloud没有支持。)

    TCC 需要注意三种异常处理分别是空回滚，幂等，悬挂。
    空回滚：没有调用try的时候，调用了第二阶段的cancel方法。cancel方法需要识别这是一个空回滚，然后直接返回成功。
          原因：分支事务所在服务器异常，分支try调用失败，当恢复后，管理器会调用cancel方法。从而形成空回滚。
          解决：全局事务ID贯穿整个分布式事务调用链条。再额外增加一张分支事务记录表，其中有全局事务ID和分支事务ID，第一阶段try方法
          里会插入一条记录，表示一阶段执行了。cancel接口会读取该记录，如果该记录存在，则正常回滚；如果该记录不存在，则是空回滚。
           既：需要cancel阶段要判断try执行了吗

    幂等：解决思路实在上述“分支事务记录”中增加执行状态，每次执行前都查询该状态。
    悬挂：悬挂就是一个分布式事务，第二阶段cancel接口比try接口先执行。
        出现原因，RPC调用分支事务try时，先注册分支事务，再执行RPC调用，如果此时RPC调用的网络发生堵塞，通常RPC调用是有超时时间的，RPC超时以后，TM就会通知RM回滚
        该分布式事务，可能回滚完成后，RPC请求才到达参与者真正执行，而一个try方法预留资源，只有该分布式事务能调用，该分布式事务预留的资源无人能处理，这就时悬挂
        既：需要try阶段要判断cancel执行了吗

    示例：
    user1
        try:
            try幂等校验
            try悬挂处理
            检查余额是否够30
            扣减30元
        confirm:
            空
        cancel：
            cancel幂等校验
            cancel空回滚处理
            增加30可用余额
    user2
        try:
            空
        confirm：
            confirm幂等校验
            增加30元
        cancel：
            空

    示例Hmily

4.可靠消息的最终一致性。
    可靠消息最终一致性方案是指当事务发起方执行完成本地事务后并发出一条消息，事务参与方一定能够接受消息并处理成功，此方案强调的是只要消息发给事务参与方，事务最终要达成一致。、
    此方案利用消息中间件完成：
        事务发起方将消息发给消息中间件，事务参与方从消息中间件接受消息，事务发起方和消费方以及中间件都是通过网络通信，由于通信的不确定性会导致事务的问题。
    1.本地事务与消息发送的原子性。即本地事务和消息发送的原子性，要么成功，要么失败。这个原子性也是最终一致性的关键。
    2.事务参与方接受消息的可靠性。
    3.消息重复消费问题。幂等性。这个好解决。

    1.本地消息表（eBay）方案：以注册并添加积分为例
        1.新增用户同时有一张本地积分消息日志，定时任务扫描未发送的消息发送给MQ，这样就保证了原子。
        2.使用MQ的ack（消息确认机制），消费者监听MQ。如果消费者接受消息并且业务处理完成后向MQ发送ack，此时说明消费完成。MQ将不再向消费者推送消息。
            积分服务增加积分，并向消息中间件回应ack。否则MQ将重复投递此消息。注意增加积分需要幂等性。



    2.RocketMQ事务消息方案
        RocketMQ 4.3 之后支持事务消息。实际上其实是对本地消息表单的一个封装，将本地消息表移动到了MQ内部，解决producer端的消息发送与本地事务执行的原子性问题。
        1. 本地事务发起方，给MQ 发送half消息
        2. MQ 回复half消息。
        3. 本地事务执行
        4. 发起方向mq 发送commit 或者 rollback消息。然后 mq向订阅放发消息或删除消息。订阅方消费成功则返回给mq ack。
        5.事务回查。如果执行发起方本地事务过程中，挂掉或者超时。MQ 将会不停的询问同组的其他发起方来获取事务执行状态，这个过程叫事务回查。
         MQ根据回查结果来决定是否投递消息。以上过程主干流程已经由RocketMQ来实现。
         对于用户侧来说，用户需要分别实现本地事务执行以及本地事务回查方法，因此只需关注本地事务执行状态。
         RocketMQ 提供了 RocketMQLocalTransactionListener接口。按照说明实现即可。


5.最大努力通知：
    目标：通知方，通过一定的机制最大努力将结果通知给事务发起方。
    1.有一定消息重复通知机制
    2.消息校对机制。
        提供业务结果查询。

    最大努力通知和可靠消息一致性的不同。
    1.通知方不同，可靠消息靠发起方，最大努力靠接受方通知
    2.业务场景不同。
        可靠消息关注交易过程的事务一致性，以异步的方式完成交易。
        最大努力通知关注的是交易后的通知事务，即将交易结果可靠的通知出去。
    3.技术解决不同。
        可靠消息解决消息从发出到接受的一致性。
        最大努力通知无法保证消息发送到接受的一致性，只提供消息接受的可靠性。


