mysql集群方案
1）读写分离架构(主从数据库。)
    一个是主库，负责写入。
    其他事从库，负责读取。
    要求:
        1）读库和写库的数据一致
        2）写数据必须写到写库
        3）读数据必须到读库。

    存在的问题：
        应用程序没有代理层（中间件）处理的情况下，需要连接多个节点，应用程序而言开发更复杂了。
            也可以用aop来实现数据库切换。（通过切换数据源来实现）
        主从之间的同步时异步完成的。意味者数据的弱一致性。
            可能读到前面的数据，甚至时从库数据更新不到。
            该问题可以用PXC集群解决（强一致）


2）中间件
    应用程序请求到中间件，应用程序开发简单。
    应用程序无需区分读写操作。
    中间件进行读写操作。分离或者其他与业务逻辑无关。

    应用系统----》中间件-----》读库
                    |-------》写库

    缺点：
        中间件成为性能瓶颈。

   应用系统----》中间件---|--》读库
         |---->中间件----|----》写库

    解决方案：多个中间件。。这样可靠性有保证，但是又带来了复杂度。
             这样虽然也有些负载，比原来好的地方在于，虽然要多个中间件，但是不用读写分离。

3）负载均衡
     在应用程序中间增加proxy代理，由代理完成负载均衡。

      应用系统-----》代理----》中间件---|----》读库(与写库弱一致)
                       |---->中间件----|----》写库

      代理和中间件功能类似，，但是中间件做的事情更多。代理只做简单转发.

4) PXC集群
    主从的弱一致性.
    PXC提供读写的强一致性.既所有写成功,才返回成功.

      应用系统-----》代理----》中间件---|----》读PXC(与写PXC强一致)---->mysql
                       |---->中间件----|----》写PXC------------------>mysql

    缺点:性能低.

5)混合架构
   应用系统-----》代理---->中间件----|----》读库(与写库弱一致)
                    |---->中间件----|----》写库(主从架构)
                    |
                    |----->中间件---|----》读PXC(与写PXC强一致)---->mysql
                    |---->中间件----|----》写PXC------------------>mysql

   