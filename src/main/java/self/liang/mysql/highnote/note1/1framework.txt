1.逻辑架构
    1）最外层是客户端到 连接/线程处理     ！最外
    2）之后会到查询缓存 和 解析器         ！中间
    3） 解析器也会到查询缓存
    4）内部还有优化器                    ！里面
    5）最后连接到存储引擎                 ！最里

    1.最上层的服务大多数基于网络的客户端/服务器工具。像是：连接认证，授权认证，安全等
    2.第二层是mysql的核心服务功能，包括：查询解析，分析，优化，缓存以及内置函数，所有跨存储引擎都在这一层：存储过程，触发器，视图
    3.第三层包含存储引擎。  存储引擎负责mysql中数据的存储和提取。


    1.1）连接管理与安全性：
        每个客户端都会在服务器进程中有个线程。由服务器管理和安全认证
    1.2）优化和执行
        优化包括：重写查询，决定表的读取顺序，以及选择合适的索引。
2.并发控制：
    mysql两个层面的并发控制：服务器层和存储引擎层。

    2.1 读写锁：
        当某一个用户在修改某一部分数据时，mysql会通过锁定防止其他用户读取同一数据。大多数时候，mysql锁的内部管理都时透明的。
    2.2 锁粒度:
        锁粒度越小，并发越高，问题是加锁也需要消耗资源，获取锁，检查锁，释放锁都会增加系统开销。
        所谓的锁策略，就是在锁的开销和数据的安全性之间寻求平衡,这种平衡也会影响到性能.
        大多数数据库都是行锁,mysql的锁策略和粒度由存储引擎实现.主要由两种:
        1)表锁
            锁定整张表.
        2)行锁
            最大程度支持并发. InnoDB实现了行级锁.后续内容及全书中,所有存储引擎都以自己的方式实现了锁机制.
3.事务
    ACID
    atomicity 原子性
        要么全成功,要么全失败,作为一个不可分割的最小单元
    consistency 一致性
        数据库总从一个一致性的状态转到另一个一致性的状态,例如:转账不会因为最后一步失败,导致凭空少200块钱
    isolation  隔离性
        通常来说,一个事务所作的修改在最终提交以前,对其他事务是不可见的.(通常!~!)
    durability 持久性
        一旦提交,就持久化保存.

    对于一些不需要事务的查询类应用,选择一个非事务的存储引擎,可以获取更好的性能.
    即使存储引擎不支持事务,也可以通过编码保证.


    3.1 隔离级别:
        1) read uncommitted  读未提交
            事务中的修改,即使没有提交,对其他事务也都是可见的.事务可以读未提交的数据,也被成为脏读.
            这种不会比其他性能好太多,但是缺乏很多好处.实际很少使用
        2) read committed 读提交
            一个事务开始时,只能看见已经提交的事务所作的修改.这个级别有时候也成为(non repeatable read)不可重复读.
            大多数数据库默认是这个级别,但mysql不是.
        3)  repeatable read 可重复读
            可重复读,解决了脏读的问题.该级别保证了同一事务中多次读取同样记录的结果时一致的.
            但是 还是无法解决幻读(phantom read) 问题.
            所谓幻读:指的是某个事务再次读取该范围的记录,会产生幻行(phantom row).InnoDB 和XtraDB通过多版本并发控制(MVCC)解决了幻读
            的问题.
            可重复读是mysql的默认事务隔离级别
        4) serializable 串行化
            最高隔离级别.它通过强制事务串行执行,避免幻读.简单来说,对读取的每一行数据上都枷锁.
            这可能导致大量锁争用.非常需要保证数据的一致性而且没有并发的情况下,才考虑采用该级别.

    3.2 死锁
        InnoDB目前处理死锁的方法是:将持有最少行级排他锁的事务进行回滚.
    3.3 事务日志
        事务日志帮助提高事务效率.
        只修改内存拷贝,再持久化.而不是每次都将数据直接持久到磁盘.
    3.4 mysql的事务
        mysql提供两种事务型的存储引擎:InnoDB和NDB cluster.

        1)自动提交
            mysql采用autocommit模式,也就是说,如果不是显示的开始一个事务,则每个语句都被当做一个事务执行处理.
                mysql> show variables like 'autocommit'
                    -> ;
                +---------------+-------+
                | Variable_name | Value |
                +---------------+-------+
                | autocommit    | ON    |
                +---------------+-------+
                1 row in set (0.00 sec)
                mysql> set autocommit = 1;

            1或者on代表启用,0或者off代表禁用. 非autocommit,所有的语句都是在一个事务中,直到显示的执行commit提交或者rollback.

            mysql可以执行set transaction isolation level命令来设置隔离级别. 可以用过配置文件,也可以只设置这次会话:例如
                mysql> set session transaction isolation level read committed.
            mysql可以识别所有4个ansi隔离级别,InnoDB也支持所有隔离级别

        2)事务中混合使用存储引擎
            事务中混合了两种表的话,提交不会由问题.
            但是如果事务需要回滚,非事务型的表myisam就无法回滚.
        3)隐式和显示的锁定
            InnoDB采取两阶段锁定协议.在事务执行过程中,随时可以锁定,只有执行commit或者rollback的时候才会释放.并且所有锁是在同一时刻被释放.
            这描述的锁定是隐式的.InnoDB会根据隔离级别在需要的时候自动枷锁.

            另外,InnoDB也支持通过特定的语句进行显式锁定,这些语句不属于sql规范:
            select .... lock in share mode
            select ... for update
            mysql支持lock tables 和unlock tables语句
4 多版本并发控制 (MVCC)
    mysql大多数事务型存储引擎实现的都不是简单的行级锁.一般都同时实现了多版本并发控制.
    可以认为mvcc是行级锁的一个变种,它在多数情况下避免了加锁操作.开销低,大都实现了非阻塞的读操作,写操作也只锁定必要的行.

    mvcc的实现,是通过保存数据在某个时间点的快照来实现的.也就是说,不管需要执行多长时间,每个事务看到的数据都是一致的.根据事务开始的时间不同,每个事务
    对同一张表,同一时刻看到的数据可能不一样.

    不同引擎对mvcc实现是不同的,典型的有乐观并发和悲观并发两种.下面通过InnoDB的简化版来说明:
        InnoDB的MVCC,是通过在每行记录后面保存两个隐藏的列来实现的.一个保存了行的创建时间,一个保存行的过期时间.
        当然存储的不是实际的时间值,而是系统版本号(system version number).
        每开始一个新的事务,系统版本号都会自动递增.事务开始时刻的系统版本号会作为事务的版本号.用来和查询到的每行记录的版本号进行比较.

        在repeatable read隔离级别下,mvcc具体是如何操作的:
          select:
            根据以下 两个条件检查每行记录:
                a.只查找版本早于当前事务版本的数据行,这样可以保证事务读取的行,要么是事务开始前就已经存在,要么是事务自身插入或者修改过的.
                b.行的删除版本们要么未定义,要么大于当前的事务版本号.这可以确保事务读取到的行,在事务开始之前未被删除.
            只有符合上面两个条件的记录,才能作为查询结果.
          insert:
            为插入的每一行保存当前系统版本号作为行版本号.
          delete
            为删除的每一行保存当前系统版本号作为删除标志
          update
            插入一条新记录,保存当前系统版本号作为行版本号,同时保存当前系统版本号到原来的行作为删除标志.
        保存这两个版本号,大多数读不用加锁.性能好,也能保证只会督导符合标准的行.不足是每行记录都需要额外空间,做更多的检查维护工作.
        mvcc只在repeatable read和read committed下工作.


5.存储引擎：用innoDB就行了
            MyISAM




