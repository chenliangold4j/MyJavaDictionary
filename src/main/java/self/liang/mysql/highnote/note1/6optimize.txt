对全表三百万数据的优化记录：
    总大小约3GB的数据，其实不大

1.查看表的索引：
    show index from table_name（表名）

      mysql> show index from mmall_user
        +------------+------------+------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
        | Table      | Non_unique | Key_name         | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
        +------------+------------+------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
        | mmall_user |          0 | PRIMARY          |            1 | id          | A         |     2719760 |     NULL | NULL   |      | BTREE      |         |               |
        | mmall_user |          0 | user_name_unique |            1 | username    | A         |     2355117 |     NULL | NULL   |      | BTREE      |         |               |
        +------------+------------+------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
        2 rows in set (0.00 sec)

        代表有两个索引：一个主键，一个username唯一索引

    添加索引 ALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )
            ALTER TABLE `table_name` ADD UNIQUE (`column`)
            等

        ALTER TABLE mmall_user ADD INDEX index_name ( question, answer) 对三百万数据的表添加一个索引 用时38s

    删除索引 drop index [index name] on table_name;

2. 简单语句的查询

    1.简单对比：

        select * from mmall_user where email = 'email2500000'; 用时1.202 s

        EXPLAIN select * from mmall_user where email = 'email25000000';
        +----+-------------+------------+------------+------+---------------+------+---------+------+---------+----------+-------------+
        | id | select_type | table      | partitions | type | possible_keys | key  | key_len | ref  | rows    | filtered | Extra       |
        +----+-------------+------------+------------+------+---------------+------+---------+------+---------+----------+-------------+
        |  1 | SIMPLE      | mmall_user | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 2932310 |    10.00 | Using where |
        +----+-------------+------------+------------+------+---------------+------+---------+------+---------+----------+-------------+
        1 row in set, 1 warning (0.00 sec)

        没有用到索引，扫描的行数超过 两百万条。

         select * from mmall_user where username='用户2500000'; 用了索引，几乎秒回

        EXPLAIN  select * from mmall_user where username='用户2500000'; rows 只有1 ，用了唯一索引非常块。

    2.索引失效的情况i
        1.like 前面不加%，可以使用索引
            select * from mmall_user where username like "%用户250%"  1.325s
            select * from mmall_user where username like "用户250%"   0.0321s

        2.or语句前后没有同时使用索引。当or左右查询字段只有一个是索引，该索引失效，只有当or左右查询字段均为索引时，才会生效
            select * from mmall_user where username = '用户250' or email='2500' 1.261 s
            select * from mmall_user where username = '用户250' or id = 1000000  0.002s

        3.组合索引，不是使用第一列索引，索引失效。  这里有 quetion和 answer的联合索引
            EXPLAIN select * from mmall_user where question = "问题123"  扫描一行
            EXPLAIN select * from mmall_user where answer = "问题123" 扫描三百万
            EXPLAIN select * from mmall_user where question="问题213" and answer = "问题123"  扫描一行
            EXPLAIN select * from mmall_user where answer = "问题123" and  question="问题213" 扫描一行
            EXPLAIN select * from mmall_user where phone="123456" and question = "问题65564" 扫描一行
            EXPLAIN select * from mmall_user where phone="123456" and answer = "问题65564"   扫描三百万

        4.在索引列上使用 IS NULL 或 IS NOT NULL操作。索引是不索引空值的，所以这样的操作不能使用索引，可以用其他的办法处理，
          例如：数字类型，判断大于0，字符串类型设置一个默认值，判断是否等于默认值即可。
            EXPLAIN select * from mmall_user where  username is not null  扫描三百万，索引失效。

        5.在索引字段上使用not，<>，!=。不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。
          优化方法： key<>0 改为 key>0 or key<0
            EXPLAIN select * from mmall_user where  username != "用户3213" 扫描三百万

        6.对索引字段进行计算操作、字段上使用函数。
            也就是说  对传入的值用函数，而不是对索引。
        7.当全表扫描速度比索引速度快时，mysql会使用全表扫描，此时索引失效。


    3.各种实验：
        1.text blob 字段的优化：
            对于blob，text，varchar(5120)这样的大字段，
            innodb只会存放前768字节在数据页中，而剩余的数据则会存储在溢出段中（发生溢出情况的时候适用），
            最大768字节的作用是便于创建前缀索引/prefix index，其余更多的内容存储在额外的page里，哪怕只是多了一个字节。因此，所有列长度越短越好


        2.
            select * from mmall_product where price > 5000 order by price limit 10000；
            mysql>  show profile cpu,block io for query  2;
            +----------------------+----------+----------+------------+--------------+---------------+
            | Status               | Duration | CPU_user | CPU_system | Block_ops_in | Block_ops_out |
            +----------------------+----------+----------+------------+--------------+---------------+
            | starting             | 0.000056 | 0.000000 |   0.000000 |            0 |             0 |
            | checking permissions | 0.000005 | 0.000000 |   0.000000 |            0 |             0 |
            | Opening tables       | 0.000009 | 0.000000 |   0.000000 |            0 |             0 |
            | init                 | 0.000016 | 0.000000 |   0.000000 |            0 |             0 |
            | System lock          | 0.000005 | 0.000000 |   0.000000 |            0 |             0 |
            | optimizing           | 0.000004 | 0.000000 |   0.000000 |            0 |             0 |
            | statistics           | 0.000009 | 0.000000 |   0.000000 |            0 |             0 |
            | preparing            | 0.000007 | 0.000000 |   0.000000 |            0 |             0 |
            | Sorting result       | 0.000002 | 0.000000 |   0.000000 |            0 |             0 |
            | executing            | 0.000002 | 0.000000 |   0.000000 |            0 |             0 |
            | Sending data         | 0.000006 | 0.000000 |   0.000000 |            0 |             0 |
            | Creating sort index  | 0.657791 | 0.580000 |   0.180000 |            0 |             0 |
            | end                  | 0.000008 | 0.000000 |   0.000000 |            0 |             0 |
            | query end            | 0.000005 | 0.000000 |   0.000000 |            0 |             0 |
            | closing tables       | 0.000005 | 0.000000 |   0.000000 |            0 |             0 |
            | freeing items        | 0.000027 | 0.000000 |   0.000000 |            0 |             0 |
            | cleaning up          | 0.000013 | 0.000000 |   0.000000 |            0 |             0 |
            +----------------------+----------+----------+------------+--------------+---------------+
            17 rows in set, 1 warning (0.00 sec)

            mysql> explain select * from mmall_product where price < 5000 order by price limit 100;
            +----+-------------+---------------+------------+------+---------------+------+---------+------+--------+----------+-----------------------------+
            | id | select_type | table         | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra                       |
            +----+-------------+---------------+------------+------+---------------+------+---------+------+--------+----------+-----------------------------+
            |  1 | SIMPLE      | mmall_product | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 650846 |    33.33 | Using where; Using filesort |
            +----+-------------+---------------+------------+------+---------------+------+---------+------+--------+----------+-----------------------------+
            1 row in set, 1 warning (0.00 sec)

            消耗主要在filesort上。由于只有65w的数据。还是1秒内返回了。
            这里的text 有2k大小，但是sending data 的量并不大。可能是数据量确实小。

        3.
          select * from
          mmall_pay_info left join  mmall_order_item on mmall_order_item.order_no = mmall_pay_info.order_no
          LEFT JOIN mmall_order on mmall_order_item.order_no = mmall_order.order_no
          where mmall_order_item.current_unit_price > 3000    limit 10000;

          用时35s

            mysql> EXPLAIN select * from
                -> mmall_pay_info left join  mmall_order_item on mmall_order_item.order_no = mmall_pay_info.order_no
                -> LEFT JOIN mmall_order on mmall_order_item.order_no = mmall_order.order_no
                -> where mmall_order_item.current_unit_price > 3000    limit 10000;
            +----+-------------+------------------+------------+------+----------------+----------------+---------+----------------------------------+---------+----------+----------------------------------------------------+
            | id | select_type | table            | partitions | type | possible_keys  | key            | key_len | ref                              | rows    | filtered | Extra                                              |
            +----+-------------+------------------+------------+------+----------------+----------------+---------+----------------------------------+---------+----------+----------------------------------------------------+
            |  1 | SIMPLE      | mmall_pay_info   | NULL       | ALL  | order_no_index | NULL           | NULL    | NULL                             | 2693691 |   100.00 | NULL                                               |
            |  1 | SIMPLE      | mmall_order_item | NULL       | ref  | order_no_index | order_no_index | 9       | testdata.mmall_pay_info.order_no |       1 |    33.33 | Using where                                        |
            |  1 | SIMPLE      | mmall_order      | NULL       | ALL  | NULL           | NULL           | NULL    | NULL                             | 2714157 |   100.00 | Using where; Using join buffer (Block Nested Loop) |
            +----+-------------+------------------+------------+------+----------------+----------------+---------+----------------------------------+---------+----------+----------------------------------------------------+
            3 rows in set, 1 warning (0.00 sec)

           排查到 mmall_order 的order_no没有索引，，先加上，其他两张表有。

          此时用时1.384秒

            mmall_order_item还是用了全表扫描

            尝试在current_unit_price 上建立索引
            create index cp_index on mmall_order_item(current_unit_price)

           mysql>  EXPLAIN select * from         mmall_pay_info left join  mmall_order_item on mmall_order_item.order_no = mmall_pay_info.order_no
                          LEFT JOIN mmall_order on mmall_order_item.order_no = mmall_order.order_no
                        where mmall_order_item.current_unit_price > 3000    limit 10000;
           +----+-------------+------------------+------------+-------+-------------------------+----------------+---------+------------------------------------+------+----------+------------------------------------+
           | id | select_type | table            | partitions | type  | possible_keys           | key            | key_len | ref                                | rows | filtered | Extra                              |
           +----+-------------+------------------+------------+-------+-------------------------+----------------+---------+------------------------------------+------+----------+------------------------------------+
           |  1 | SIMPLE      | mmall_order_item | NULL       | range | order_no_index,cp_index | cp_index       | 10      | NULL                               |   18 |   100.00 | Using index condition; Using where |
           |  1 | SIMPLE      | mmall_pay_info   | NULL       | ref   | order_no_index          | order_no_index | 9       | testdata.mmall_order_item.order_no |    1 |   100.00 | NULL                               |
           |  1 | SIMPLE      | mmall_order      | NULL       | ref   | order_no_index          | order_no_index | 9       | testdata.mmall_order_item.order_no |    1 |   100.00 | NULL                               |
           +----+-------------+------------------+------------+-------+-------------------------+----------------+---------+------------------------------------+------+----------+------------------------------------+
           3 rows in set, 1 warning (0.01 sec)

           此时没有全表扫描，用时0.002

           但是单独建立索引消耗太多。。
           尝试建立order_no 与current_unit_price的联合索引。

           EXPLAIN select * from           mmall_pay_info left join  mmall_order_item on mmall_order_item.order_no = mmall_pay_info.order_no           LEFT JOIN mmall_order on mmall_order_item.order_no = mmall_order.order_no           where mmall_order_item.current_unit_price > 3000    limit 10000;
           +----+-------------+------------------+------------+------+-------------------------+----------------+---------+------------------------------------+---------+----------+-------------+
           | id | select_type | table            | partitions | type | possible_keys           | key            | key_len | ref                                | rows    | filtered | Extra       |
           +----+-------------+------------------+------------+------+-------------------------+----------------+---------+------------------------------------+---------+----------+-------------+
           |  1 | SIMPLE      | mmall_order_item | NULL       | ALL  | order_no_index,cp_index | NULL           | NULL    | NULL                               | 2852569 |    33.33 | Using where |
           |  1 | SIMPLE      | mmall_pay_info   | NULL       | ref  | order_no_index          | order_no_index | 9       | testdata.mmall_order_item.order_no |       1 |   100.00 | NULL        |
           |  1 | SIMPLE      | mmall_order      | NULL       | ref  | order_no_index          | order_no_index | 9       | testdata.mmall_order_item.order_no |       1 |   100.00 | NULL        |
           +----+-------------+------------------+------------+------+-------------------------+----------------+---------+------------------------------------+---------+----------+-------------+
           3 rows in set, 1 warning (0.00 sec)

           这时候发现 没有用上。

           还是不行，如果是这个语句只能建立current_unit_price 的索引。可以考虑加别的条件。



        4.





