1.通过unsafe类分配内存,可以释放内存:
    类中提供的3个本地方法allocateMemory、reallocateMemory、freeMemory分别用于分配内存，扩充内存和释放内存，与C语言中的3个方法对应。
2.可以定位对象某字段的内存位置,也可以修改对象的字段值,即使它是私有的:
    public native long allocateMemory(long l);
    public native long reallocateMemory(long l, long l1);
    public native void freeMemory(long l);

  1) 字段的定位：
   JAVA中对象的字段的定位可能通过staticFieldOffset方法实现，该方法返回给定field的内存地址偏移量，这个值对于给定的filed是唯一的且是固定不变的。
   getIntVolatile方法获取对象中offset偏移地址对应的整型field的值,支持volatile load语义。
   getLong方法获取对象中offset偏移地址对应的long型field的值
 2)数组元素定位：
  Unsafe类中有很多以BASE_OFFSET结尾的常量，比如ARRAY_INT_BASE_OFFSET，ARRAY_BYTE_BASE_OFFSET等，
  这些常量值是通过arrayBaseOffset方法得到的。arrayBaseOffset方法是一个本地方法，
  可以获取数组第一个元素的偏移地址。Unsafe类中还有很多以INDEX_SCALE结尾的常量，比如 ARRAY_INT_INDEX_SCALE ， ARRAY_BYTE_INDEX_SCALE等，
  这些常量值是通过arrayIndexScale方法得到的。arrayIndexScale方法也是一个本地方法，可以获取数组的转换因子，也就是数组中元素的增量地址。
  将arrayBaseOffset与arrayIndexScale配合使用，可以定位数组中每个元素在内存中的位置。

3.挂起和回复:
    将一个线程进行挂起是通过park方法实现的，调用 park后，线程将一直阻塞直到超时或者中断等条件出现。
    unpark可以终止一个挂起的线程，使其恢复正常。
    整个并发框架中对线程的挂起操作被封装在 LockSupport类中，LockSupport类中有各种版本pack方法，但最终都调用了Unsafe.park()方法。

4.cas操作
    是通过compareAndSwapXXX方法实现的
