1.基本数据模型：
    1） 是一个树形结构，类似文件目录结构
    2）每一个节点都称为znode，它可以有数据，也可以有数据。
    3）每个节点分为临时节点，和永久节点，临时节点在客户端断开后消失。
    4）每个zk节点都有各自的版本号，可以用命令行显示信息
    5）每当节点数据发生变化，那边该节点的版本号会累加（乐观锁）
    6）删除/修改过时节点，版本号不匹配则会报错
    7）每个zk节点储存的数据不宜过大，几k即可
    8）节点可以设置权限acl，可以通过权限来限制用户的访问。
2.基本操作
   1）客户端连接
   zkCli.sh
   WATCHER::
   WatchedEvent state:SyncConnected type:None path:null
   [zk: localhost:2181(CONNECTED) 0]
   通过help看命令

   2）查看znode结构
   [zk: localhost:2181(CONNECTED) 2] ls /
   [zookeeper]
   [zk: localhost:2181(CONNECTED) 4] ls /zookeeper
   [quota]
   [zk: localhost:2181(CONNECTED) 5] ls /zookeeper/quota
   []

   初始化只有/zookeeper/quota，没有其他了
   3）关闭连接
   ctrl + c
3.zk的作用：
    1） master节点选举，主节点挂了以后，从节点就会接手工作，并且保证这个节点是唯一的，从而保证集群是高可用的。
    2） 统一配置文件管理，只需要部署一台服务器，则可以把相同的配置文件同步更新到其他所有服务器，此操作在云计算中用的特别多（假设修改了redis统一配置）
    3）发布和订阅，类似小区队列MQ （amq，rmq 。。），dubbo发布者把数据存在znode上，订阅者会读取这个数据
    4）提供了分布式锁，分布式环境中不同进程之间争夺资源，类似于多线程的锁
    5）集群管理，集群中保证数据的强一致性
