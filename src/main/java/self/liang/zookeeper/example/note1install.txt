1.首先是 环境搭建：
    这里选择用docker来，

    1）镜像下载
    hub.docker.com 上有不少 ZK 镜像, 不过为了稳定起见, 我们就使用官方的 ZK 镜像吧.
    首先执行如下命令:
    docker pull zookeeper

   2） ZK 镜像的基本使用
    启动 ZK 镜像
    >>> docker run --name my_zookeeper -d zookeeper:latest
    或者
    docker run --privileged=true -d --name zookeeper --publish 2181:2181  -d zookeeper

    这个命令会在后台运行一个 zookeeper 容器, 名字是 my_zookeeper, 并且它默认会导出 2181 端口.
    接着我们使用:
    docker logs -f my_zookeeper

    这个命令查看 ZK 的运行情况, 输出类似如下内容时, 表示 ZK 已经成功启动了:

    >>> docker logs -f my_zookeeper
    ZooKeeper JMX enabled by default
    Using config: /conf/zoo.cfg
    ...
    2016-09-14 06:40:03,445 [myid:] - INFO  [main:NIOServerCnxnFactory@89] - binding to port 0.0.0.0/0.0.0.0:2181


    3）使用 ZK 命令行客户端连接 ZK
    因为刚才我们启动的那个 ZK 容器并没有绑定宿主机的端口, 因此我们不能直接访问它. 但是我们可以通过 Docker 的 link 机制来对这个 ZK 容器进行访问. 执行如下命令:
    docker run -it --rm --link my_zookeeper:zookeeper zookeeper zkCli.sh -server zookeeper
    　　
    如果对 Docker 有过了解的话, 那么对上面的命令一定不会陌生了.
    这个命令的含义是:

    启动一个 zookeeper 镜像, 并运行这个镜像内的 zkCli.sh 命令, 命令参数是 "-server zookeeper"

    将我们先前启动的名为 my_zookeeper 的容器连接(link) 到我们新建的这个容器上, 并将其主机名命名为 zookeeper

    当我们执行了这个命令后, 就可以像正常使用 ZK 命令行客户端一样操作 ZK 服务了.

    4）ZK 集群的搭建
        见docker的5示例
2.zoo.cfg配置
    tickTime: 用于计算时间的单元，比如session超时。N*tickTime
    initLimit:用于集群，允许从节点连接并同步到master节点的初始化连接时间，以tickTime的倍数来表示
    syncLimit：用于集群，master主节点与从节点之间发送消息，请求和应带时间长度。（心跳机制）
    dataDir:必须配置，数据存储目录
    dataLogDir:日志目录。不建议用临时文件夹存储。
