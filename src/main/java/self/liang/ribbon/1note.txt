https://www.jianshu.com/p/1bd66db5dc46

1.org.springframework.cloud.client.loadbalancer.LoadBalancerClient
的 URI reconstructURI(ServiceInstance instance, URI original); 方法

        ▪️为了给一些系统使用，创建一个带有真实host和port的URI。

        ▪️一些系统使用带有原服务名代替host的URI，比如http://myservice/path/to/service。

        ▪️该方法会从服务实例中取出host:port来替换这个服务名。

2.LoadBalancerAutoConfiguration
 该自动配置类，主要做了下面三件事：

        创建了一个LoadBalancerInterceptor的Bean，用于实现对客户端发起请求时进行拦截，以实现客户端负载均衡。

        创建了一个RestTemplateCustomizer的Bean，用于给RestTemplate增加LoadbalancerInterceptor

        维护了一个被@LoadBalanced注解修饰的RestTemplate对象列表，并在这里进行初始化，通过调用RestTemplateCustomizer的实例来给需要客户端负载均衡的RestTemplate
        增加LoadBalancerInterceptor拦截器。


3.LoadBalancerInterceptor
 当一个被@LoadBalanced注解修饰的RestTemplate对象向外发起HTTP请求时，会被LoadBalancerInterceptor类的intercept函数所拦截。
 由于我们在使用RestTemplate时候采用了服务名作为host，所以直接从HttpRequest的URI对象中通过getHost()就可以拿到服务名，然后调用execute函数去根据服务名来选择实例并发起实际的请求。

4.RibbonLoadBalancerClient
   在execute函数的实现中，第一步做的就是通过getServer根据传入的服务名serviceId去获得具体的服务实例：

   通过getServer函数的实现源码，我们可以看到这里获取具体服务实例的时候并没有使用LoadBalancerClient接口中的choose函数，
   而是使用了ribbon自身的ILoadBalancer接口中定义的chooseServer函数。

   该接口的实现，我们可以整理出如上图所示的结构。我们可以看到BaseloadBalancer类实现了基础的负载均衡，
   而DynamicServerListLoadBalancer和ZoneAwareLoadBalancer在负载均衡的策略上做了一些功能的扩展。

   默认采用ZoneAvoidanceRule来实现负载均衡器。
