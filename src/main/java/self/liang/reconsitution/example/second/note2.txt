1.重构的目的是使得软件更容易被理解和修改
    与之相对的是性能优化，和重构一样，性能优化通常不改变组件的行为，只会改变其内部结构。但是两者的出发点不同，
    性能优化往往使代码较难理解，但为了的都所需的性能，你不得不那么做。
    重构不会改变软件可观察的行为，重构之后软件功能一如既往。

2.两顶帽子：
    添加新功能时，你不应该修改既有代码，只管添加新功能。通过测试你可以衡量自己的工作进度。
    重构时你就不应该再添加功能，只管改进程序结构。此时你不应该添加任何测试，只在绝对必要时才修改测试。

3.完成同一件事。设计不良的程序往往需要更多代码，这常常时因为代码在不同的地方使用完全相同的语句做同样的事情。
  消除重复。。代码愈多，修改越困难。事物和行为在代码中只表述一次，这正是优秀设计的根本。

4.重构的时机：当你想做别的事。而重构可以帮助你把那些事做好。

5.事不过三，三则重构。

6.程序难以修改的原因：
    1）难以阅读
    2）逻辑重复
    3）添加新行为需要修改已有代码的程序
    4）带负载条件逻辑的程序

7. 搞计算机的都相信所有问题都可以通过增加一个间接层来解决。相应会增加复杂度。。但是不加间接层，似乎到后期复杂度会更高

8.重构的一些问题
    1）数据库
       1.绝大多数商用程序都与它们背后的数据库结构紧密耦合在一起，这也是数据库结构如此难以修改的原因之一。
       2.随业务发展可能的数据迁移
    2）修改接口
        1.有时候可能修改接口会更好，但是接口是一个已发布的接口---由其他人实现，非自己的代码。
        2.尽量不要发布接口。。因为这样意味你的代码和其他人的相关起来。。发布功能则不一样。
        3.可以定义抛出异常。这样就逼迫引用接口的人做异常处理。。使得后来的修改更为轻松。。不一致的地方可以通过抛出异常信息予以警告。
    3）安全性
        在由安全性的需求的系统。。重构要顾及安全性的时候会比较麻烦。。。
    4）不如重写
        由时候代码太混乱。。重构不如重写。。。
        重写的清楚信号：现有代码根本不能正常运作。
    5）实际度量：
        哪怕你完全了解系统，也请实际度量它的性能，不要臆测，臆测十有八九是错的。
    6）性能优化
        性能优化步骤也应该和重构一样，小步走。。小步测试。。
        监控度量性能的工具很重要。不然优化无从谈起




