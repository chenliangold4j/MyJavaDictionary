构筑测试体系
    1.每个类都应该有一个测试函数，并以它来测试自己这个类
    2.所有测试都应该是完全自动化的。让它们检查自己的测试结果
    3.编写测试代码的最有用时机是在开始编程之前。当你需要添加功能前，应该已经编写好测试。
      因为编写测试，就是在问自己，添加这个功能需要做些什么。也更让人关注接口而非实现
      而且工作又明确的结束标志：测试代码正常运行。
    4.频繁的运行测试。每次编译请把测试也考虑进去--
    5.在复杂一些的测试用，先让它失败，以证明确实会失败。。
    6.单元测试和功能测试
        junit是单元测试。单元测试会提高程序员的效率。是高度局部化的东西。
        功能测试。保证软件能够正常运作。从客户角度保证质量。它们应该由一个独立团队来开发。这个团队应该使用重量级工具和技术来帮助自己开发
        良好的功能测试。一般而言是尽量是黑箱测试。
        一旦功能测试到bug。应该写一个专门的单元测试盯住这个bug。
        重构更多的依赖单元测试。
    7.过于简单的函数就算了。浪费时间。
    8.测试一项重要的技巧就是“寻找边界条件”。考虑到各种极限条件，积极思考如何破坏代码。
    9.测试的数量增高的同时，效益在递减。别太多了。最重要的还是效率。用测试提高自己，而非拖慢自己。
    10.测试，是重构的前提。
