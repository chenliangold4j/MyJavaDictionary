1.读写分离
    1.需要配置mysql的主从复制
        在mysql里面有主从的搭建记录.这里再记录一遍.
        1.配置文件
        2.主机里创建角色
            mysql> create user 'slave'@'%' identified by '123456'
                -> ;
            Query OK, 0 rows affected (0.01 sec)

            mysql>  grant replication slave on *.* to 'slave'@'%';
            Query OK, 0 rows affected (0.00 sec)

            mysql> flush privileges;
            Query OK, 0 rows affected (0.01 sec)

        3.slave配置主机
           CHANGE MASTER TO
                   master_host='172.17.0.2',
                   master_user='slave',
                   master_password='123456',
                   master_port=3306,
                   master_log_file='mysql-bin.000005',
                   master_log_pos=154;

                   mysql> start slave;
                   Query OK, 0 rows affected (0.00 sec)

                   mysql> show slave status\G;
                   *************************** 1. row ***************************
                                  Slave_IO_State: Waiting for master to send event
                                     Master_Host: 172.17.0.2
                                     Master_User: slave
                                     Master_Port: 3306
                                   Connect_Retry: 60
                                 Master_Log_File: mysql-bin.000004
                             Read_Master_Log_Pos: 749
                                  Relay_Log_File: 1adc5cdd4d71-relay-bin.000002
                                   Relay_Log_Pos: 320
                           Relay_Master_Log_File: mysql-bin.000004
                                Slave_IO_Running: Yes                -----------------! 这两个yes为成功
                               Slave_SQL_Running: Yes                -----------------!

         4.mycat配置
            这里注意dataHost的balance的值:
                1. balance = "0" 不开启读写分离机制
                2. balance="1"  全部的readhost与stand by writeHost 参与select 语句的负载均衡,简单的说,当双主双从模式 M1->S1 M2->S2 且m1 m2互为主备
                    ,正常情况下,m2 s1 s2 都参与select语句的负载均衡
                3. balance="2" 所有读操作都随机的在 writeHost,readhost上分发.
                4. balance="3' 所有读请求分发到readHost,writerHost 不负担读压力.


            <mycat:schema xmlns:mycat="http://io.mycat/">
            	<schema name="TESTDB" checkSQLschema="false" sqlMaxLimit="100" dataNode="dn1">
            	</schema>
            	<!-- <dataNode name="dn1$0-743" dataHost="localhost1" database="db$0-743" /> -->
            	<dataNode name="dn1" dataHost="localhost1" database="db1" />
            	<dataHost name="localhost1" maxCon="1000" minCon="10" balance="0" writeType="0" dbType="mysql" dbDriver="native" switchType="1" slaveThreshold="100">
            		<heartbeat>select user()</heartbeat>
            		<!-- can have multi write hosts -->
            		<writeHost host="hostM1" url="192.168.11.33:3406" user="root" password="123456">
            			<!-- can have multi read hosts -->
            			<readHost host="hostS2" url="192.168.11.33:3506" user="root" password="123456" />
            		</writeHost>
            	</dataHost>
            </mycat:schema>


2.双主双从:
        1.搭建:
            1.删除db,从新配置主从(stop slave reset master);
            2.配置文件更新:
                log-slave-updates  # 作为从库有写入也更新二进制日志文件
                auto-increment-increment=2 # 自增长字段的每次递增量
                auto-increment-offset = 1; #自增长字段的开始值  这里每个主库的起始值不一样.需要分开

            3.两台主机都创建slave用户并配置主从
            4.双主互备;
                这里是m2复制m1,同时m1复制m2
                这里和slave复制master的命令一致
                 CHANGE MASTER TO
                                   master_host='172.17.0.4',
                                   master_user='slave',
                                   master_password='123456',
                                   master_port=3306,
                                   master_log_file='mysql-bin.000003',
                                   master_log_pos=764;

            5.修改mycat配置 balance=1
                writeType : 0:所有写操作发送到配置的第一个writeHost，第一个挂了之后切换到第二个
                            1：所有写操作都随机的发送到配置的writeHost，1.5以后废弃
                switchType: 1: 默认值，自动切换
                            -1：不自动切换
                            2 基于mysql主从同步的状态决定是否切换。
             <schema name="TESTDB" checkSQLschema="false" sqlMaxLimit="100" dataNode="dn1">
             	</schema>
             	<!-- <dataNode name="dn1$0-743" dataHost="localhost1" database="db$0-743" /> -->
             	<dataNode name="dn1" dataHost="localhost1" database="db1" />
             	<dataHost name="localhost1" maxCon="1000" minCon="10" balance="1" writeType="0" dbType="mysql" dbDriver="native" switchType="1" slaveThreshold="100">
             		<heartbeat>select user()</heartbeat>
             		<!-- can have multi write hosts -->
             		<writeHost host="hostM1" url="192.168.11.33:3406" user="root" password="123456">
             			<!-- can have multi read hosts -->
             			<readHost host="hostS1" url="192.168.11.33:3506" user="root" password="123456" />
             		</writeHost>
             		<writeHost host="hostM2" url="192.168.11.33:3606" user="root" password="123456">
             			<!-- can have multi read hosts -->
             			<readHost host="hostS2" url="192.168.11.33:3706" user="root" password="123456" />
             		</writeHost>
             	</dataHost>


3.垂直拆分：
        拆分的考虑： 1.关联查询不能跨主机，所以垂直拆分，尽量把有关联关系的放一起
        步骤：
            1.修改schema.xml
                新增table信息 以及dn2
                	<schema name="TESTDB" checkSQLschema="false" sqlMaxLimit="100" dataNode="dn1">
                		<table name="customer" dataNode="dn2"></table>
                	</schema>
                	<!-- <dataNode name="dn1$0-743" dataHost="localhost1" database="db$0-743" /> -->
                	<dataNode name="dn1" dataHost="host1" database="orders" />
                	<dataNode name="dn2" dataHost="host2" database="orders" />
                	<dataHost name="host1" maxCon="1000" minCon="10" balance="0" writeType="0" dbType="mysql" dbDriver="native" switchType="1" slaveThreshold="100">
                		<heartbeat>select user()</heartbeat>
                		<!-- can have multi write hosts -->
                		<writeHost host="hostM1" url="192.168.11.33:4006" user="root" password="123456">
                		</writeHost>
                	</dataHost>

                	<dataHost name="host2" maxCon="1000" minCon="10" balance="0" writeType="0" dbType="mysql" dbDriver="native" switchType="1" slaveThreshold="100">
                		<heartbeat>select user()</heartbeat>
                		<!-- can have multi write hosts -->
                		<writeHost host="hostM1" url="192.168.11.33:4007" user="root" password="123456">
                		</writeHost>
                	</dataHost>

4.水平拆分：
        安装某个字段某种规则来分散到多个数据库。
        注意水平拆分方案需要考虑是否会负载不平衡。
        例如：订单表拆分，用id或者时间都会导致同一时间的一台机器负载过多，用用户id的话就相对均衡，而且有利于集中用户订单信息。

        步骤：
            1.修改schema.xml
            	<schema name="TESTDB" checkSQLschema="false" sqlMaxLimit="100" dataNode="dn1">
            		<table name="customer" dataNode="dn2"></table>
            		<table name="orders" dataNode="dn1,dn2" rule="mode_rule"></table>
            	</schema>
            2.修改rule.xml
                <function name="mod-long" class="io.mycat.route.function.PartitionByMod">
                		<!-- how many data nodes -->
                		<property name="count">2</property>
                </function>
                <tableRule name="mod_rule">
                    <rule>
                        <columns>customer_id</columns>
                        <algorithm>mod-long</algorithm>
                    </rule>
                </tableRule>

        mycat的分片join
           mycat会各自在机器上join，所以如果要做链接，在示例的order_detail 就必须规则和orders一致
           1.ER表：
                mycat将子表的储存依赖于主表，并且物理上紧邻存放。
                配置步骤
                    1.schema.xml
                            <schema name="TESTDB" checkSQLschema="false" sqlMaxLimit="100" dataNode="dn1">
                                <table name="customer" dataNode="dn2"></table>
                                <table name="orders" dataNode="dn1,dn2" rule="mod_rule">
                                    <childTable name="order_detail" primaryKey="id" joinKey="order_id" parentKey="id"/>
                                    //将order_detail设置为子表，其中order_id对应主表的id
                                </table>
                            </schema>
                            mysql> select o.*,od.detail from orders o inner join orders_detail od on o.id=od.order_id;
                            +----+------------+-------------+-----------+---------+
                            | id | order_type | customer_id | amount    | detail  |
                            +----+------------+-------------+-----------+---------+
                            |  3 |        101 |         101 | 110300.00 | detail3 |
                            |  4 |        101 |         101 | 112300.00 | detail4 |
                            |  5 |        102 |         101 | 112400.00 | detail5 |
                            |  1 |        101 |         100 | 100100.00 | detail1 |
                            |  2 |        101 |         100 | 100300.00 | detail2 |
                            |  6 |        102 |         100 | 162400.00 | detail6 |
                            +----+------------+-------------+-----------+---------+

        全局表：
            多个数据节点都需要这个表，查询只从一个获取，修改到所有节点。
            配置：
                修改schema.xml
                <table name="dict_order_type" dataNode="dn1,dn2" type="global"></table>


        常用的分片规则
            1.取模 //已经使用
            2.分片枚举
                通过在配置文件中配置可能的枚举id，自己配置分片，本规则适用于特定场景，比如有业务需要按照省份或区县来做保存。
                步骤：
                    1.修改schema.mxl
                	  <table name="orders_ware_info" dataNode="dn1,dn2" rule="sharding_by_intfile"></table>
                	2.修改rule.xml
                		<tableRule name="sharding_by_intfile">
                    		<rule>
                    			<columns>areacode</columns>
                    			<algorithm>hash-int</algorithm>
                    		</rule>
                    	</tableRule>
                	   	<function name="hash-int" class="io.mycat.route.function.PartitionByFileMap">
                       		<property name="mapFile">partition-hash-int.txt</property> // 标识配置文件的名字
                       		<property name="type">1</property>// 0 为int值，非0为String
                       		<property name="defaultNode">0</property>// 默认节点，不认识的枚举值会路由到默认节点
                       	</function>

                    3.修改partition-hash-int.txt配置文件
                        110=0
                        120=1
            3.范围约定：
                1.schema.xml
                    <table name="payment_info" dataNode="dn1,dn2" rule="auto_sharding_long"></table>
                2.修改rule.xml
                    	<tableRule name="auto_sharding_long">
                    		<rule>
                    			<columns>order_id</columns>
                    			<algorithm>rang-long</algorithm>
                    		</rule>
                    	</tableRule>
                    	<function name="rang-long" class="io.mycat.route.function.AutoPartitionByLong">
                        		<property name="mapFile">autopartition-long.txt</property>
                        		<property name="defaultNode">0</property>
                        </function>
                3.修改autopartition-long.txt
            4.按时间划分
                schema.xml <table name="login_info" dataNode="dn1,dn2" rule="sharding_by_date"></table>
                rule.xml
                  	<function name="shardingByDate" class="io.mycat.route.function.PartitionByDate">
                  		<property name="dateFormat">yyyy-MM-dd</property>
                  		<property name="sBeginDate">2020-01-01</property>
                  		<property name="sEndDate">2020-12-31</property>
                  		<property name="sPartionDay">183</property>
                  	</function>
                insert into login_info(id,user_id,login_date) values(1,101,'2020-04-01');
                insert into login_info(id,user_id,login_date) values(2,122,'2020-11-01');
                insert into login_info(id,user_id,login_date) values(3,132,'2020-01-01');
                insert into login_info(id,user_id,login_date) values(4,432,'2020-03-01');
                insert into login_info(id,user_id,login_date) values(5,232,'2020-09-01');
                insert into login_info(id,user_id,login_date) values(6,1132,'2020-07-01');

        全局序列：
            分库分表的情况下，自增主键已经无法保证唯一，为此，mycat提供了全局sequence，提供了包含本地配置和数据库配置等多种方式
            1.本地文件：
                mycat将sequence配置到文件中，但使用到后，mycat会更下classpath中的sequence_conf.properties文件中sequence当前的值
                这种方式并不推荐，抗风险能力差
            2.数据库方式：
                利用一个数据库的表来进行累加计数。但不是每次都读写数据库，mycat会预加载一部分号段到内存，用完再取。
                步骤：
                   https://www.cnblogs.com/ivictor/p/5235147.html

                   insert into orders(id,amount,customer_id,order_type) values(next value for MYCATSEQ_MYCAT,1000,101,102);
            3.时间戳：
                 全局ID = 64位二进制 (42(毫秒)+5(机器id）+5（业务编码）+12（重复累加）换算成十进制为18位数的long类型，每毫秒可以风法12位进制的累加。
                 优点：配置简单
                 缺点：id过长
            4.自主生成全局序列：
                可再java项目里自己生成全局序列
                例如可以用redis的单线程原子性incr来生成序列。
